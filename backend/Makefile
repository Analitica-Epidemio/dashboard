# Makefile simplificado - Docker-only development (2025)
# Compatible con Windows (Git Bash), macOS y Linux
# Comandos estándar de la industria

.PHONY: help up down logs shell test lint clean build reset-db reset-all

# Comando por defecto
help: ## Show this help message
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'

# =============================================================================
# DESARROLLO (Docker only)
# =============================================================================

up: ## Start development stack
	docker compose up

down: ## Stop development stack
	docker compose down

restart: ## Restart all services
	docker compose restart

logs: ## View logs (use: make logs SERVICE=api)
	@if [ -z "$(SERVICE)" ]; then \
		docker compose logs -f; \
	else \
		docker compose logs -f $(SERVICE); \
	fi

build: ## Rebuild containers
	docker compose build

rebuild: ## Rebuild and start
	docker compose up --build

# =============================================================================
# DESARROLLO INTERACTIVO
# =============================================================================

shell: ## Open Python shell in API container
	docker compose exec api uv run python

bash: ## Open bash shell in API container
	docker compose exec api bash

# =============================================================================
# TESTING Y CALIDAD
# =============================================================================

test: ## Run tests
	docker compose exec api uv run pytest

lint: ## Run linter and formatter
	docker compose exec api uv run ruff check . --fix
	docker compose exec api uv run ruff format .

typecheck: ## Run type checking
	docker compose exec api uv run mypy app

qa: ## Run all quality checks (lint + typecheck + test)
	@make lint
	@make typecheck
	@make test

# =============================================================================
# BASE DE DATOS
# =============================================================================

migrate: ## Run database migrations
	docker compose exec api uv run alembic upgrade head

migration: ## Create new migration (use: make migration MSG="description")
	@if [ -z "$(MSG)" ]; then \
		echo "Error: Please provide a message. Usage: make migration MSG=\"description\""; \
		exit 1; \
	fi
	docker compose exec api uv run alembic revision --autogenerate -m "$(MSG)"

rollback: ## Rollback last migration
	docker compose exec api uv run alembic downgrade -1

seed: ## Seed database with initial data
	docker compose exec api uv run python -m app.scripts.seed

# =============================================================================
# LIMPIEZA
# =============================================================================

clean: ## Remove all containers, volumes and clean cache
	docker compose down -v
	find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name "*.pyc" -delete 2>/dev/null || true
	find . -type d -name ".pytest_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".mypy_cache" -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name ".ruff_cache" -exec rm -rf {} + 2>/dev/null || true

reset-db: ## Reset ONLY database (keeps Redis cache)
	@echo "⚠️  WARNING: This will delete ALL database data (keeps Redis)"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	docker compose stop db
	docker compose rm -f db
	docker volume rm $$(docker volume ls -q | grep postgres) 2>/dev/null || true
	docker compose up -d db
	@echo "Waiting for database to be ready..."
	@sleep 5
	@make migrate
	@make seed
	@echo "✅ Database reset complete (Redis intact)"

reset-all: ## Reset EVERYTHING (database + Redis)
	@echo "⚠️  WARNING: This will delete ALL data (database + Redis)"
	@read -p "Are you sure? (y/N): " confirm && [ "$$confirm" = "y" ] || exit 1
	docker compose down -v
	docker compose up -d db redis
	@sleep 5
	@make migrate
	@make seed
	@echo "✅ Full reset complete"

# =============================================================================
# PRODUCCIÓN
# =============================================================================

prod: ## Build and run production image
	docker build -f Dockerfile -t epidemiologia-api:latest .
	docker run -p 8000:8000 --env-file .env epidemiologia-api:latest

# =============================================================================
# SETUP INICIAL
# =============================================================================

setup: ## Initial setup (run once)
	@echo "Setting up project..."
	@if [ ! -f .env ]; then \
		cp .env.example .env; \
		echo "✅ Created .env file - please edit it with your settings"; \
	fi
	@mkdir -p uploads logs
	@docker compose build
	@echo "✅ Setup complete! Run 'make up' to start"

# =============================================================================
# UTILIDADES
# =============================================================================

ps: ## Show running containers
	docker compose ps

stats: ## Show container stats
	docker stats --no-stream

exec: ## Execute command in container (use: make exec CMD="command")
	@if [ -z "$(CMD)" ]; then \
		echo "Error: Please provide a command. Usage: make exec CMD=\"command\""; \
		exit 1; \
	fi
	docker compose exec api $(CMD)