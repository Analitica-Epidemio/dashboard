"""initial migration with all tables

Revision ID: 7f74d379f63f
Revises: 
Create Date: 2025-10-28 16:26:35.184969

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel  # Always import sqlmodel for SQLModel types
import geoalchemy2  # Required for Geometry types


# revision identifiers, used by Alembic.
revision: str = '7f74d379f63f'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('antecedente_epidemiologico',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_snvs_antecedente_epidemio', sa.Integer(), nullable=True),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('capa_hidrografia',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('tipo', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('geometria', geoalchemy2.types.Geometry(geometry_type='MULTILINESTRING', srid=4326, dimension=2, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('fuente', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_capa_hidrografia_geometria', 'capa_hidrografia', ['geometria'], unique=False, postgresql_using='gist')
    op.create_table('ciudadano',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('apellido', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('tipo_documento', sa.Enum('DNI', 'LIBRETA_CIVICA', 'LIBRETA_ENROLAMIENTO', 'CEDULA_IDENTIDAD', 'PASAPORTE', name='tipodocumento'), nullable=True),
    sa.Column('numero_documento', sa.BigInteger(), nullable=True),
    sa.Column('fecha_nacimiento', sa.Date(), nullable=True),
    sa.Column('sexo_biologico_al_nacer', sa.Enum('MASCULINO', 'FEMENINO', 'NO_ESPECIFICADO', name='sexobiologico'), nullable=True),
    sa.Column('sexo_biologico', sa.Enum('MASCULINO', 'FEMENINO', 'NO_ESPECIFICADO', name='sexobiologico'), nullable=True),
    sa.Column('genero_autopercibido', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('etnia', sqlmodel.sql.sqltypes.AutoString(length=30), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('codigo_ciudadano', name='uk_ciudadano_codigo'),
    sa.UniqueConstraint('tipo_documento', 'numero_documento', name='uk_ciudadano_documento')
    )
    op.create_index(op.f('ix_ciudadano_apellido'), 'ciudadano', ['apellido'], unique=False)
    op.create_index(op.f('ix_ciudadano_codigo_ciudadano'), 'ciudadano', ['codigo_ciudadano'], unique=True)
    op.create_index(op.f('ix_ciudadano_nombre'), 'ciudadano', ['nombre'], unique=False)
    op.create_index(op.f('ix_ciudadano_numero_documento'), 'ciudadano', ['numero_documento'], unique=False)
    op.create_index(op.f('ix_ciudadano_tipo_documento'), 'ciudadano', ['tipo_documento'], unique=False)
    op.create_table('comorbilidad',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('dashboard_charts',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('codigo', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('descripcion', sa.Text(), nullable=True),
    sa.Column('funcion_procesamiento', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('condiciones_display', sa.JSON(), nullable=True),
    sa.Column('tipo_visualizacion', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('configuracion_chart', sa.JSON(), nullable=True),
    sa.Column('orden', sa.Integer(), nullable=False),
    sa.Column('activo', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_dashboard_charts_codigo'), 'dashboard_charts', ['codigo'], unique=True)
    op.create_table('datamart_epidemiologia',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_evento_caso', sa.BigInteger(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('id_evento', sa.Integer(), nullable=True),
    sa.Column('dni_ciudadano', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('nombre_completo', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('fecha_nacimiento', sa.Date(), nullable=True),
    sa.Column('sexo', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('id_localidad_indec', sa.Integer(), nullable=True),
    sa.Column('nombre_localidad', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('nombre_departamento', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('region_sanitaria', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('nombre_evento', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('grupo_evento', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('fecha_inicio_sintomas', sa.Date(), nullable=True),
    sa.Column('fecha_apertura_caso', sa.Date(), nullable=True),
    sa.Column('semana_epidemiologica_apertura', sa.Integer(), nullable=True),
    sa.Column('anio_epidemiologico_apertura', sa.Integer(), nullable=True),
    sa.Column('anio_evento', sa.Integer(), nullable=True),
    sa.Column('clasificacion_resumen', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('es_caso_sintomatico', sa.Boolean(), nullable=True),
    sa.Column('cantidad_sintomas', sa.Integer(), nullable=True),
    sa.Column('sintomas_principales', sa.Text(), nullable=True),
    sa.Column('cantidad_muestras', sa.Integer(), nullable=True),
    sa.Column('resultado_final', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('fecha_resultado', sa.Date(), nullable=True),
    sa.Column('fue_internado', sa.Boolean(), nullable=True),
    sa.Column('dias_internacion', sa.Integer(), nullable=True),
    sa.Column('requirio_uti', sa.Boolean(), nullable=True),
    sa.Column('evolucion_final', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('fecha_alta', sa.Date(), nullable=True),
    sa.Column('ultima_actualizacion_datamart', sa.DateTime(), nullable=False),
    sa.Column('hash_cambios', sqlmodel.sql.sqltypes.AutoString(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_datamart_clasificacion', 'datamart_epidemiologia', ['clasificacion_resumen'], unique=False)
    op.create_index('idx_datamart_evento_fecha', 'datamart_epidemiologia', ['id_evento', 'fecha_inicio_sintomas'], unique=False)
    op.create_index('idx_datamart_fecha_evento', 'datamart_epidemiologia', ['fecha_inicio_sintomas', 'anio_evento'], unique=False)
    op.create_index('idx_datamart_localidad_fecha', 'datamart_epidemiologia', ['id_localidad_indec', 'fecha_inicio_sintomas'], unique=False)
    op.create_index('idx_datamart_semana_epi', 'datamart_epidemiologia', ['anio_epidemiologico_apertura', 'semana_epidemiologica_apertura'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_anio_evento'), 'datamart_epidemiologia', ['anio_evento'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_clasificacion_resumen'), 'datamart_epidemiologia', ['clasificacion_resumen'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_codigo_ciudadano'), 'datamart_epidemiologia', ['codigo_ciudadano'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_dni_ciudadano'), 'datamart_epidemiologia', ['dni_ciudadano'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_evolucion_final'), 'datamart_epidemiologia', ['evolucion_final'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_fecha_apertura_caso'), 'datamart_epidemiologia', ['fecha_apertura_caso'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_fecha_inicio_sintomas'), 'datamart_epidemiologia', ['fecha_inicio_sintomas'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_fue_internado'), 'datamart_epidemiologia', ['fue_internado'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_grupo_evento'), 'datamart_epidemiologia', ['grupo_evento'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_id_evento'), 'datamart_epidemiologia', ['id_evento'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_id_evento_caso'), 'datamart_epidemiologia', ['id_evento_caso'], unique=True)
    op.create_index(op.f('ix_datamart_epidemiologia_id_localidad_indec'), 'datamart_epidemiologia', ['id_localidad_indec'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_region_sanitaria'), 'datamart_epidemiologia', ['region_sanitaria'], unique=False)
    op.create_index(op.f('ix_datamart_epidemiologia_resultado_final'), 'datamart_epidemiologia', ['resultado_final'], unique=False)
    op.create_table('determinacion',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('codigo', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_determinacion_codigo'), 'determinacion', ['codigo'], unique=True)
    op.create_table('grupo_eno',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('codigo', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_grupo_eno_codigo'), 'grupo_eno', ['codigo'], unique=True)
    op.create_table('muestra',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('processing_jobs',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('job_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='jobstatus'), nullable=False),
    sa.Column('priority', sa.Enum('LOW', 'NORMAL', 'HIGH', 'URGENT', name='jobpriority'), nullable=False),
    sa.Column('progress_percentage', sa.Integer(), nullable=False),
    sa.Column('current_step', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('total_steps', sa.Integer(), nullable=False),
    sa.Column('completed_steps', sa.Integer(), nullable=False),
    sa.Column('original_filename', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('file_path', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('file_size', sa.Integer(), nullable=True),
    sa.Column('sheet_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('total_rows', sa.Integer(), nullable=True),
    sa.Column('columns', sa.JSON(), nullable=True),
    sa.Column('validation_errors', sa.JSON(), nullable=True),
    sa.Column('job_metadata', sa.JSON(), nullable=True),
    sa.Column('error_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('error_traceback', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('celery_task_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('provincia',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_provincia_indec', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('poblacion', sa.Integer(), nullable=True),
    sa.Column('superficie_km2', sa.Float(), nullable=True),
    sa.Column('latitud', sa.Float(), nullable=True),
    sa.Column('longitud', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_provincia_id_provincia_indec'), 'provincia', ['id_provincia_indec'], unique=True)
    op.create_index(op.f('ix_provincia_nombre'), 'provincia', ['nombre'], unique=False)
    op.create_table('sintoma',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_snvs_signo_sintoma', sa.Integer(), nullable=False),
    sa.Column('signo_sintoma', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sintoma_id_snvs_signo_sintoma'), 'sintoma', ['id_snvs_signo_sintoma'], unique=True)
    op.create_table('tipo_eno',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('codigo', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tipo_eno_codigo'), 'tipo_eno', ['codigo'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('apellido', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('role', sa.Enum('SUPERADMIN', 'EPIDEMIOLOGO', name='userrole'), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', name='userstatus'), nullable=False),
    sa.Column('is_email_verified', sa.Boolean(), nullable=False),
    sa.Column('email_verification_token', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('password_reset_token', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('password_reset_expires', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
    sa.Column('login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('vacuna',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('ciudadano_comorbilidades',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('id_comorbilidad', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['codigo_ciudadano'], ['ciudadano.codigo_ciudadano'], ),
    sa.ForeignKeyConstraint(['id_comorbilidad'], ['comorbilidad.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('departamento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_departamento_indec', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('id_provincia_indec', sa.Integer(), nullable=False),
    sa.Column('region_sanitaria', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('poblacion', sa.Integer(), nullable=True),
    sa.Column('superficie_km2', sa.Float(), nullable=True),
    sa.Column('latitud', sa.Float(), nullable=True),
    sa.Column('longitud', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['id_provincia_indec'], ['provincia.id_provincia_indec'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_provincia_indec', 'id_departamento_indec', name='uq_departamento_provincia_departamento')
    )
    op.create_index(op.f('ix_departamento_id_departamento_indec'), 'departamento', ['id_departamento_indec'], unique=False)
    op.create_index(op.f('ix_departamento_id_provincia_indec'), 'departamento', ['id_provincia_indec'], unique=False)
    op.create_index(op.f('ix_departamento_nombre'), 'departamento', ['nombre'], unique=False)
    op.create_table('event_strategy',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tipo_eno_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('confidence_threshold', sa.Float(), nullable=False),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('valid_from', sa.DateTime(), nullable=False),
    sa.Column('valid_until', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('created_by', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('updated_by', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.ForeignKeyConstraint(['tipo_eno_id'], ['tipo_eno.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_event_strategy_active', 'event_strategy', ['is_active'], unique=False)
    op.create_index('idx_event_strategy_tipo_eno', 'event_strategy', ['tipo_eno_id'], unique=False)
    op.create_index('idx_event_strategy_validity', 'event_strategy', ['tipo_eno_id', 'valid_from', 'valid_until'], unique=False)
    op.create_index(op.f('ix_event_strategy_is_active'), 'event_strategy', ['is_active'], unique=False)
    op.create_index(op.f('ix_event_strategy_name'), 'event_strategy', ['name'], unique=False)
    op.create_table('tecnica',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('codigo', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('id_determinacion', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_determinacion'], ['determinacion.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tecnica_codigo'), 'tecnica', ['codigo'], unique=True)
    op.create_table('tipo_eno_grupo_eno',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_tipo_eno', sa.Integer(), nullable=False),
    sa.Column('id_grupo_eno', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_grupo_eno'], ['grupo_eno.id'], ),
    sa.ForeignKeyConstraint(['id_tipo_eno'], ['tipo_eno.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_tipo_eno', 'id_grupo_eno', name='uq_tipo_eno_grupo_eno')
    )
    op.create_table('user_logins',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('email_attempted', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('failure_reason', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('ip_address', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('user_agent', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('attempted_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_logins_email_attempted'), 'user_logins', ['email_attempted'], unique=False)
    op.create_index(op.f('ix_user_logins_user_id'), 'user_logins', ['user_id'], unique=False)
    op.create_table('user_sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('session_token', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('ip_address', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('user_agent', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('device_fingerprint', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_activity', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_sessions_session_token'), 'user_sessions', ['session_token'], unique=True)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_table('capa_area_urbana',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('id_departamento_indec', sa.Integer(), nullable=True),
    sa.Column('id_departamento', sa.Integer(), nullable=True),
    sa.Column('poblacion', sa.Integer(), nullable=True),
    sa.Column('geometria', geoalchemy2.types.Geometry(geometry_type='MULTIPOLYGON', srid=4326, dimension=2, spatial_index=False, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('fuente', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.ForeignKeyConstraint(['id_departamento'], ['departamento.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_capa_area_urbana_geometria', 'capa_area_urbana', ['geometria'], unique=False, postgresql_using='gist')
    op.create_table('classification_rule',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('classification', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('justificacion', sa.Text(), nullable=True),
    sa.Column('ejemplos', sa.Text(), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('auto_approve', sa.Boolean(), nullable=False),
    sa.Column('required_confidence', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['strategy_id'], ['event_strategy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_classification_rule_priority', 'classification_rule', ['priority'], unique=False)
    op.create_index('idx_classification_rule_strategy', 'classification_rule', ['strategy_id', 'classification'], unique=False)
    op.create_table('localidad',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_localidad_indec', sa.BigInteger(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('id_departamento_indec', sa.Integer(), nullable=True),
    sa.Column('id_departamento', sa.Integer(), nullable=True),
    sa.Column('poblacion', sa.Integer(), nullable=True),
    sa.Column('codigo_postal', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('latitud', sa.Float(), nullable=True),
    sa.Column('longitud', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['id_departamento'], ['departamento.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_localidad_id_departamento_indec'), 'localidad', ['id_departamento_indec'], unique=False)
    op.create_index(op.f('ix_localidad_id_localidad_indec'), 'localidad', ['id_localidad_indec'], unique=True)
    op.create_index(op.f('ix_localidad_nombre'), 'localidad', ['nombre'], unique=False)
    op.create_table('resultado_tecnica',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('codigo', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('descripcion', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('es_positivo', sa.Boolean(), nullable=True),
    sa.Column('id_tecnica', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_tecnica'], ['tecnica.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_resultado_tecnica_codigo'), 'resultado_tecnica', ['codigo'], unique=True)
    op.create_table('strategy_change_log',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('change_type', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('changes', sa.JSON(), nullable=True),
    sa.Column('changed_by', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('changed_at', sa.DateTime(), nullable=False),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('ip_address', sqlmodel.sql.sqltypes.AutoString(length=45), nullable=True),
    sa.Column('user_agent', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.ForeignKeyConstraint(['strategy_id'], ['event_strategy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_strategy_change_log_date', 'strategy_change_log', ['changed_at'], unique=False)
    op.create_index('idx_strategy_change_log_strategy', 'strategy_change_log', ['strategy_id'], unique=False)
    op.create_index(op.f('ix_strategy_change_log_changed_at'), 'strategy_change_log', ['changed_at'], unique=False)
    op.create_index(op.f('ix_strategy_change_log_strategy_id'), 'strategy_change_log', ['strategy_id'], unique=False)
    op.create_table('animal',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('especie', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('raza', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('sexo', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('edad_aproximada', sa.Integer(), nullable=True),
    sa.Column('identificacion', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('subespecie', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('clasificacion_taxonomica', sa.JSON(), nullable=True),
    sa.Column('origen_deteccion', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('confidence_deteccion', sa.Float(), nullable=True),
    sa.Column('propietario_nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('propietario_contacto', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('id_localidad_indec', sa.BigInteger(), nullable=True),
    sa.Column('direccion', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.ForeignKeyConstraint(['id_localidad_indec'], ['localidad.id_localidad_indec'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('domicilio',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('calle', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('numero', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=True),
    sa.Column('id_localidad_indec', sa.BigInteger(), nullable=False),
    sa.Column('latitud', sa.Numeric(precision=10, scale=8), nullable=True),
    sa.Column('longitud', sa.Numeric(precision=11, scale=8), nullable=True),
    sa.Column('geocodificado', sa.Boolean(), nullable=False),
    sa.Column('proveedor_geocoding', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('confidence_geocoding', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['id_localidad_indec'], ['localidad.id_localidad_indec'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('calle', 'numero', 'id_localidad_indec', name='uq_domicilio_direccion')
    )
    op.create_index(op.f('ix_domicilio_calle'), 'domicilio', ['calle'], unique=False)
    op.create_index(op.f('ix_domicilio_id_localidad_indec'), 'domicilio', ['id_localidad_indec'], unique=False)
    op.create_table('establecimiento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('nombre', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('codigo_refes', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('latitud', sa.Float(), nullable=True),
    sa.Column('longitud', sa.Float(), nullable=True),
    sa.Column('id_localidad_indec', sa.BigInteger(), nullable=True),
    sa.ForeignKeyConstraint(['id_localidad_indec'], ['localidad.id_localidad_indec'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_establecimiento_id_localidad_indec'), 'establecimiento', ['id_localidad_indec'], unique=False)
    op.create_table('filter_condition',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rule_id', sa.Integer(), nullable=True),
    sa.Column('strategy_id', sa.Integer(), nullable=True),
    sa.Column('filter_type', sa.Enum('CAMPO_IGUAL', 'CAMPO_EN_LISTA', 'CAMPO_CONTIENE', 'REGEX_EXTRACCION', 'CAMPO_EXISTE', 'CAMPO_NO_NULO', 'CUSTOM_FUNCTION', 'DETECTOR_TIPO_SUJETO', 'EXTRACTOR_METADATA', name='tipofiltro'), nullable=False),
    sa.Column('field_name', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=False),
    sa.Column('config', sa.JSON(), nullable=True),
    sa.Column('extracted_metadata_field', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('logical_operator', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('order', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['rule_id'], ['classification_rule.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['event_strategy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_filter_condition_field', 'filter_condition', ['field_name'], unique=False)
    op.create_index('idx_filter_condition_rule', 'filter_condition', ['rule_id'], unique=False)
    op.create_index('idx_filter_condition_strategy', 'filter_condition', ['strategy_id'], unique=False)
    op.create_index(op.f('ix_filter_condition_field_name'), 'filter_condition', ['field_name'], unique=False)
    op.create_table('viajes_ciudadano',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_snvs_viaje_epidemiologico', sa.Integer(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('id_localidad_destino_viaje', sa.BigInteger(), nullable=True),
    sa.Column('fecha_inicio_viaje', sa.Date(), nullable=True),
    sa.Column('fecha_finalizacion_viaje', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['codigo_ciudadano'], ['ciudadano.codigo_ciudadano'], ),
    sa.ForeignKeyConstraint(['id_localidad_destino_viaje'], ['localidad.id_localidad_indec'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_viajes_ciudadano_id_snvs_viaje_epidemiologico'), 'viajes_ciudadano', ['id_snvs_viaje_epidemiologico'], unique=True)
    op.create_table('ciudadano_domicilio',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('id_domicilio', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['codigo_ciudadano'], ['ciudadano.codigo_ciudadano'], ),
    sa.ForeignKeyConstraint(['id_domicilio'], ['domicilio.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ciudadano_domicilio_id_domicilio'), 'ciudadano_domicilio', ['id_domicilio'], unique=False)
    op.create_table('evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_evento_caso', sa.BigInteger(), nullable=False),
    sa.Column('fecha_minima_evento', sa.Date(), nullable=True),
    sa.Column('fecha_inicio_sintomas', sa.Date(), nullable=True),
    sa.Column('es_caso_sintomatico', sa.Boolean(), nullable=True),
    sa.Column('fecha_apertura_caso', sa.Date(), nullable=True),
    sa.Column('semana_epidemiologica_apertura', sa.Integer(), nullable=True),
    sa.Column('anio_epidemiologico_apertura', sa.Integer(), nullable=True),
    sa.Column('fecha_nacimiento', sa.Date(), nullable=True),
    sa.Column('fecha_primera_consulta', sa.Date(), nullable=True),
    sa.Column('anio_epidemiologico_consulta', sa.Integer(), nullable=True),
    sa.Column('semana_epidemiologica_consulta', sa.Integer(), nullable=True),
    sa.Column('semana_minima_calculada', sa.Integer(), nullable=True),
    sa.Column('anio_evento', sa.Integer(), nullable=True),
    sa.Column('observaciones_texto', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('fecha_consulta', sa.Date(), nullable=True),
    sa.Column('id_origen', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=True),
    sa.Column('semana_epidemiologica_sintomas', sa.Integer(), nullable=True),
    sa.Column('semana_epidemiologica_muestra', sa.Integer(), nullable=True),
    sa.Column('id_tipo_eno', sa.Integer(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=True),
    sa.Column('id_animal', sa.Integer(), nullable=True),
    sa.Column('id_establecimiento_consulta', sa.Integer(), nullable=True),
    sa.Column('id_establecimiento_notificacion', sa.Integer(), nullable=True),
    sa.Column('id_establecimiento_carga', sa.Integer(), nullable=True),
    sa.Column('requiere_revision_especie', sa.Boolean(), nullable=True),
    sa.Column('datos_originales_csv', sa.JSON(), nullable=True),
    sa.Column('metadata_clasificacion', sa.JSON(), nullable=True),
    sa.Column('clasificacion_manual', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('clasificacion_estrategia', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('metadata_extraida', sa.JSON(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('id_estrategia_aplicada', sa.Integer(), nullable=True),
    sa.Column('trazabilidad_clasificacion', sa.JSON(), nullable=True),
    sa.Column('id_domicilio', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['codigo_ciudadano'], ['ciudadano.codigo_ciudadano'], ),
    sa.ForeignKeyConstraint(['id_animal'], ['animal.id'], ),
    sa.ForeignKeyConstraint(['id_domicilio'], ['domicilio.id'], ),
    sa.ForeignKeyConstraint(['id_establecimiento_carga'], ['establecimiento.id'], ),
    sa.ForeignKeyConstraint(['id_establecimiento_consulta'], ['establecimiento.id'], ),
    sa.ForeignKeyConstraint(['id_establecimiento_notificacion'], ['establecimiento.id'], ),
    sa.ForeignKeyConstraint(['id_estrategia_aplicada'], ['event_strategy.id'], ),
    sa.ForeignKeyConstraint(['id_tipo_eno'], ['tipo_eno.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_evento_domicilio_fecha', 'evento', ['id_domicilio', 'fecha_minima_evento'], unique=False)
    op.create_index('idx_evento_fecha_minima', 'evento', ['fecha_minima_evento'], unique=False)
    op.create_index('idx_evento_tipo_eno_fecha', 'evento', ['id_tipo_eno', 'fecha_minima_evento'], unique=False)
    op.create_index(op.f('ix_evento_id_domicilio'), 'evento', ['id_domicilio'], unique=False)
    op.create_index(op.f('ix_evento_id_evento_caso'), 'evento', ['id_evento_caso'], unique=True)
    op.create_table('persona_domicilio',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('id_domicilio', sa.Integer(), nullable=False),
    sa.Column('fecha_desde', sa.Date(), nullable=False),
    sa.Column('fecha_hasta', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['codigo_ciudadano'], ['ciudadano.codigo_ciudadano'], ),
    sa.ForeignKeyConstraint(['id_domicilio'], ['domicilio.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('codigo_ciudadano', 'id_domicilio', 'fecha_desde', name='uq_persona_domicilio_fecha')
    )
    op.create_index(op.f('ix_persona_domicilio_codigo_ciudadano'), 'persona_domicilio', ['codigo_ciudadano'], unique=False)
    op.create_index(op.f('ix_persona_domicilio_fecha_desde'), 'persona_domicilio', ['fecha_desde'], unique=False)
    op.create_index(op.f('ix_persona_domicilio_id_domicilio'), 'persona_domicilio', ['id_domicilio'], unique=False)
    op.create_table('ambitos_concurrencia_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('id_localidad_ambito_ocurrencia', sa.BigInteger(), nullable=True),
    sa.Column('nombre_lugar_ocurrencia', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('tipo_lugar_ocurrencia', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('localidad_ambito_ocurrencia', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('fecha_ambito_ocurrencia', sa.Date(), nullable=True),
    sa.Column('frecuencia_concurrencia', sa.Enum('UNICA_VEZ', 'DIARIA', 'SEMANAL', 'MENSUAL', 'ANUAL', 'OCASIONAL', name='frecuenciaocurrencia'), nullable=True),
    sa.Column('es_sitio_probable_adquisicion_infeccion', sa.Boolean(), nullable=True),
    sa.Column('es_sitio_probable_diseminacion_infeccion', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.ForeignKeyConstraint(['id_localidad_ambito_ocurrencia'], ['localidad.id_localidad_indec'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', name='uq_ambito_evento')
    )
    op.create_table('antecedentes_epidemiologicos_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fecha_antecedente_epidemiologico', sa.Date(), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('id_antecedente_epidemiologico', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_antecedente_epidemiologico'], ['antecedente_epidemiologico.id'], ),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', 'id_antecedente_epidemiologico', name='uq_evento_antecedente')
    )
    op.create_table('ciudadano_datos',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('cobertura_social_obra_social', sqlmodel.sql.sqltypes.AutoString(length=250), nullable=True),
    sa.Column('edad_anos_actual', sa.Integer(), nullable=True),
    sa.Column('ocupacion_laboral', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('informacion_contacto', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('es_declarado_pueblo_indigena', sa.Boolean(), nullable=True),
    sa.Column('es_embarazada', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['codigo_ciudadano'], ['ciudadano.codigo_ciudadano'], ),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('contactos_notificacion',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('hubo_contacto_con_caso_confirmado', sa.Boolean(), nullable=True),
    sa.Column('hubo_contacto_con_caso_sospechoso', sa.Boolean(), nullable=True),
    sa.Column('contactos_relevados_contactos_detectados', sqlmodel.sql.sqltypes.AutoString(length=32), nullable=True),
    sa.Column('cantidad_contactos_menores_un_anio', sa.Integer(), nullable=True),
    sa.Column('cantidad_contactos_vacunados', sa.Integer(), nullable=True),
    sa.Column('cantidad_contactos_embarazadas', sa.Integer(), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', name='uq_contactos_evento')
    )
    op.create_table('detalle_evento_sintomas',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('semana_epidemiologica_aparicion_sintoma', sa.Integer(), nullable=True),
    sa.Column('fecha_inicio_sintoma', sa.Date(), nullable=True),
    sa.Column('anio_epidemiologico_sintoma', sa.Integer(), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('id_sintoma', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.ForeignKeyConstraint(['id_sintoma'], ['sintoma.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', 'id_sintoma', name='uq_evento_sintoma')
    )
    op.create_table('diagnostico_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('clasificacion_manual', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=False),
    sa.Column('clasificacion_automatica', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('clasificacion_algoritmo', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('validacion', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('edad_diagnostico', sa.Integer(), nullable=True),
    sa.Column('grupo_etario', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('diagnostico_referido', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('fecha_diagnostico_referido', sa.Date(), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('id_establecimiento_diagnostico', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_establecimiento_diagnostico'], ['establecimiento.id'], ),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', name='uq_diagnostico_evento')
    )
    op.create_table('event_classification_audit',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('clasificacion_aplicada', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rule_id_applied', sa.Integer(), nullable=True),
    sa.Column('tipo_sujeto_detectado', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('metadata_extraida', sa.JSON(), nullable=True),
    sa.Column('requiere_revision_manual', sa.Boolean(), nullable=False),
    sa.Column('revision_completada', sa.Boolean(), nullable=False),
    sa.Column('revisado_por', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('fecha_revision', sa.DateTime(), nullable=True),
    sa.Column('clasificacion_original', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('tipo_sujeto_original', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('metadata_original', sa.JSON(), nullable=True),
    sa.Column('notas_revision', sa.Text(), nullable=True),
    sa.Column('razon_ambiguedad', sqlmodel.sql.sqltypes.AutoString(length=500), nullable=True),
    sa.Column('classified_at', sa.DateTime(), nullable=False),
    sa.Column('datos_csv_originales', sa.JSON(), nullable=True),
    sa.Column('procesamiento_version', sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
    sa.Column('tiempo_procesamiento_ms', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.ForeignKeyConstraint(['rule_id_applied'], ['classification_rule.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['event_strategy.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_event_classification_audit_confidence', 'event_classification_audit', ['confidence_score'], unique=False)
    op.create_index('idx_event_classification_audit_date', 'event_classification_audit', ['classified_at'], unique=False)
    op.create_index('idx_event_classification_audit_evento', 'event_classification_audit', ['id_evento'], unique=False)
    op.create_index('idx_event_classification_audit_strategy', 'event_classification_audit', ['strategy_id'], unique=False)
    op.create_index(op.f('ix_event_classification_audit_classified_at'), 'event_classification_audit', ['classified_at'], unique=False)
    op.create_index(op.f('ix_event_classification_audit_id_evento'), 'event_classification_audit', ['id_evento'], unique=False)
    op.create_index(op.f('ix_event_classification_audit_strategy_id'), 'event_classification_audit', ['strategy_id'], unique=False)
    op.create_table('evento_grupo_eno',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('id_grupo_eno', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.ForeignKeyConstraint(['id_grupo_eno'], ['grupo_eno.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', 'id_grupo_eno', name='uq_evento_grupo_eno')
    )
    op.create_table('internacion_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fue_internado', sa.Boolean(), nullable=True),
    sa.Column('fue_curado', sa.Boolean(), nullable=True),
    sa.Column('requirio_cuidado_intensivo', sa.Boolean(), nullable=True),
    sa.Column('fecha_internacion', sa.Date(), nullable=True),
    sa.Column('fecha_cuidados_intensivos', sa.Date(), nullable=True),
    sa.Column('establecimiento_internacion', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('fecha_alta_medica', sa.Date(), nullable=True),
    sa.Column('es_fallecido', sa.Boolean(), nullable=True),
    sa.Column('fecha_fallecimiento', sa.Date(), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', name='uq_internacion_evento')
    )
    op.create_table('investigacion_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('es_usuario_centinela', sa.Boolean(), nullable=True),
    sa.Column('es_evento_centinela', sa.Boolean(), nullable=True),
    sa.Column('id_usuario_registro', sa.Integer(), nullable=True),
    sa.Column('participo_usuario_centinela', sa.Boolean(), nullable=True),
    sa.Column('id_usuario_centinela_participante', sa.Integer(), nullable=True),
    sa.Column('id_snvs_evento', sa.Integer(), nullable=True),
    sa.Column('es_investigacion_terreno', sa.Boolean(), nullable=True),
    sa.Column('fecha_investigacion', sa.Date(), nullable=True),
    sa.Column('tipo_y_lugar_investigacion', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('origen_financiamiento', sa.Enum('PUBLICO', 'PRIVADO', 'MIXTO', name='origenfinanciamiento'), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', name='uq_investigacion_evento')
    )
    op.create_table('muestra_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fecha_toma_muestra', sa.Date(), nullable=True),
    sa.Column('semana_epidemiologica_muestra', sa.Integer(), nullable=True),
    sa.Column('anio_epidemiologico_muestra', sa.Integer(), nullable=True),
    sa.Column('id_snvs_evento_muestra', sa.BigInteger(), nullable=True),
    sa.Column('id_snvs_prueba_muestra', sa.BigInteger(), nullable=True),
    sa.Column('valor', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('id_snvs_usuario_interpretacion', sa.Integer(), nullable=True),
    sa.Column('id_snvs_tipo_prueba', sa.Integer(), nullable=True),
    sa.Column('id_snvs_prueba', sa.Integer(), nullable=True),
    sa.Column('id_snvs_resultado', sa.Integer(), nullable=True),
    sa.Column('fecha_papel', sa.Date(), nullable=True),
    sa.Column('id_snvs_muestra', sa.BigInteger(), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('id_establecimiento', sa.Integer(), nullable=False),
    sa.Column('id_muestra', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_establecimiento'], ['establecimiento.id'], ),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.ForeignKeyConstraint(['id_muestra'], ['muestra.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_snvs_muestra', 'id_evento', name='uq_muestra_evento')
    )
    op.create_index(op.f('ix_muestra_evento_id_snvs_muestra'), 'muestra_evento', ['id_snvs_muestra'], unique=False)
    op.create_table('tratamiento_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('establecimiento_tratamiento', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('descripcion_tratamiento', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('fecha_inicio_tratamiento', sa.Date(), nullable=True),
    sa.Column('fecha_fin_tratamiento', sa.Date(), nullable=True),
    sa.Column('resultado_tratamiento', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('id_evento', sa.Integer(), nullable=False),
    sa.Column('id_establecimiento_tratamiento', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['id_establecimiento_tratamiento'], ['establecimiento.id'], ),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id_evento', 'descripcion_tratamiento', 'fecha_inicio_tratamiento', name='uq_tratamiento_evento')
    )
    op.create_table('vacunas_ciudadano',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('dosis', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('fecha_aplicacion', sa.Date(), nullable=True),
    sa.Column('codigo_ciudadano', sa.BigInteger(), nullable=False),
    sa.Column('id_vacuna', sa.Integer(), nullable=False),
    sa.Column('id_evento', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['codigo_ciudadano'], ['ciudadano.codigo_ciudadano'], ),
    sa.ForeignKeyConstraint(['id_evento'], ['evento.id'], ),
    sa.ForeignKeyConstraint(['id_vacuna'], ['vacuna.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('codigo_ciudadano', 'id_vacuna', 'fecha_aplicacion', 'dosis', name='uq_vacuna_ciudadano')
    )
    op.create_table('estudio_evento',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fecha_estudio', sa.Date(), nullable=True),
    sa.Column('determinacion', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('tecnica', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('resultado', sqlmodel.sql.sqltypes.AutoString(length=150), nullable=True),
    sa.Column('fecha_recepcion', sa.Date(), nullable=True),
    sa.Column('id_muestra', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id_muestra'], ['muestra_evento.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('estudio_evento')
    op.drop_table('vacunas_ciudadano')
    op.drop_table('tratamiento_evento')
    op.drop_index(op.f('ix_muestra_evento_id_snvs_muestra'), table_name='muestra_evento')
    op.drop_table('muestra_evento')
    op.drop_table('investigacion_evento')
    op.drop_table('internacion_evento')
    op.drop_table('evento_grupo_eno')
    op.drop_index(op.f('ix_event_classification_audit_strategy_id'), table_name='event_classification_audit')
    op.drop_index(op.f('ix_event_classification_audit_id_evento'), table_name='event_classification_audit')
    op.drop_index(op.f('ix_event_classification_audit_classified_at'), table_name='event_classification_audit')
    op.drop_index('idx_event_classification_audit_strategy', table_name='event_classification_audit')
    op.drop_index('idx_event_classification_audit_evento', table_name='event_classification_audit')
    op.drop_index('idx_event_classification_audit_date', table_name='event_classification_audit')
    op.drop_index('idx_event_classification_audit_confidence', table_name='event_classification_audit')
    op.drop_table('event_classification_audit')
    op.drop_table('diagnostico_evento')
    op.drop_table('detalle_evento_sintomas')
    op.drop_table('contactos_notificacion')
    op.drop_table('ciudadano_datos')
    op.drop_table('antecedentes_epidemiologicos_evento')
    op.drop_table('ambitos_concurrencia_evento')
    op.drop_index(op.f('ix_persona_domicilio_id_domicilio'), table_name='persona_domicilio')
    op.drop_index(op.f('ix_persona_domicilio_fecha_desde'), table_name='persona_domicilio')
    op.drop_index(op.f('ix_persona_domicilio_codigo_ciudadano'), table_name='persona_domicilio')
    op.drop_table('persona_domicilio')
    op.drop_index(op.f('ix_evento_id_evento_caso'), table_name='evento')
    op.drop_index(op.f('ix_evento_id_domicilio'), table_name='evento')
    op.drop_index('idx_evento_tipo_eno_fecha', table_name='evento')
    op.drop_index('idx_evento_fecha_minima', table_name='evento')
    op.drop_index('idx_evento_domicilio_fecha', table_name='evento')
    op.drop_table('evento')
    op.drop_index(op.f('ix_ciudadano_domicilio_id_domicilio'), table_name='ciudadano_domicilio')
    op.drop_table('ciudadano_domicilio')
    op.drop_index(op.f('ix_viajes_ciudadano_id_snvs_viaje_epidemiologico'), table_name='viajes_ciudadano')
    op.drop_table('viajes_ciudadano')
    op.drop_index(op.f('ix_filter_condition_field_name'), table_name='filter_condition')
    op.drop_index('idx_filter_condition_strategy', table_name='filter_condition')
    op.drop_index('idx_filter_condition_rule', table_name='filter_condition')
    op.drop_index('idx_filter_condition_field', table_name='filter_condition')
    op.drop_table('filter_condition')
    op.drop_index(op.f('ix_establecimiento_id_localidad_indec'), table_name='establecimiento')
    op.drop_table('establecimiento')
    op.drop_index(op.f('ix_domicilio_id_localidad_indec'), table_name='domicilio')
    op.drop_index(op.f('ix_domicilio_calle'), table_name='domicilio')
    op.drop_table('domicilio')
    op.drop_table('animal')
    op.drop_index(op.f('ix_strategy_change_log_strategy_id'), table_name='strategy_change_log')
    op.drop_index(op.f('ix_strategy_change_log_changed_at'), table_name='strategy_change_log')
    op.drop_index('idx_strategy_change_log_strategy', table_name='strategy_change_log')
    op.drop_index('idx_strategy_change_log_date', table_name='strategy_change_log')
    op.drop_table('strategy_change_log')
    op.drop_index(op.f('ix_resultado_tecnica_codigo'), table_name='resultado_tecnica')
    op.drop_table('resultado_tecnica')
    op.drop_index(op.f('ix_localidad_nombre'), table_name='localidad')
    op.drop_index(op.f('ix_localidad_id_localidad_indec'), table_name='localidad')
    op.drop_index(op.f('ix_localidad_id_departamento_indec'), table_name='localidad')
    op.drop_table('localidad')
    op.drop_index('idx_classification_rule_strategy', table_name='classification_rule')
    op.drop_index('idx_classification_rule_priority', table_name='classification_rule')
    op.drop_table('classification_rule')
    op.drop_index('idx_capa_area_urbana_geometria', table_name='capa_area_urbana', postgresql_using='gist')
    op.drop_table('capa_area_urbana')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_session_token'), table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_user_logins_user_id'), table_name='user_logins')
    op.drop_index(op.f('ix_user_logins_email_attempted'), table_name='user_logins')
    op.drop_table('user_logins')
    op.drop_table('tipo_eno_grupo_eno')
    op.drop_index(op.f('ix_tecnica_codigo'), table_name='tecnica')
    op.drop_table('tecnica')
    op.drop_index(op.f('ix_event_strategy_name'), table_name='event_strategy')
    op.drop_index(op.f('ix_event_strategy_is_active'), table_name='event_strategy')
    op.drop_index('idx_event_strategy_validity', table_name='event_strategy')
    op.drop_index('idx_event_strategy_tipo_eno', table_name='event_strategy')
    op.drop_index('idx_event_strategy_active', table_name='event_strategy')
    op.drop_table('event_strategy')
    op.drop_index(op.f('ix_departamento_nombre'), table_name='departamento')
    op.drop_index(op.f('ix_departamento_id_provincia_indec'), table_name='departamento')
    op.drop_index(op.f('ix_departamento_id_departamento_indec'), table_name='departamento')
    op.drop_table('departamento')
    op.drop_table('ciudadano_comorbilidades')
    op.drop_table('vacuna')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tipo_eno_codigo'), table_name='tipo_eno')
    op.drop_table('tipo_eno')
    op.drop_index(op.f('ix_sintoma_id_snvs_signo_sintoma'), table_name='sintoma')
    op.drop_table('sintoma')
    op.drop_index(op.f('ix_provincia_nombre'), table_name='provincia')
    op.drop_index(op.f('ix_provincia_id_provincia_indec'), table_name='provincia')
    op.drop_table('provincia')
    op.drop_table('processing_jobs')
    op.drop_table('muestra')
    op.drop_index(op.f('ix_grupo_eno_codigo'), table_name='grupo_eno')
    op.drop_table('grupo_eno')
    op.drop_index(op.f('ix_determinacion_codigo'), table_name='determinacion')
    op.drop_table('determinacion')
    op.drop_index(op.f('ix_datamart_epidemiologia_resultado_final'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_region_sanitaria'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_id_localidad_indec'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_id_evento_caso'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_id_evento'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_grupo_evento'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_fue_internado'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_fecha_inicio_sintomas'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_fecha_apertura_caso'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_evolucion_final'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_dni_ciudadano'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_codigo_ciudadano'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_clasificacion_resumen'), table_name='datamart_epidemiologia')
    op.drop_index(op.f('ix_datamart_epidemiologia_anio_evento'), table_name='datamart_epidemiologia')
    op.drop_index('idx_datamart_semana_epi', table_name='datamart_epidemiologia')
    op.drop_index('idx_datamart_localidad_fecha', table_name='datamart_epidemiologia')
    op.drop_index('idx_datamart_fecha_evento', table_name='datamart_epidemiologia')
    op.drop_index('idx_datamart_evento_fecha', table_name='datamart_epidemiologia')
    op.drop_index('idx_datamart_clasificacion', table_name='datamart_epidemiologia')
    op.drop_table('datamart_epidemiologia')
    op.drop_index(op.f('ix_dashboard_charts_codigo'), table_name='dashboard_charts')
    op.drop_table('dashboard_charts')
    op.drop_table('comorbilidad')
    op.drop_index(op.f('ix_ciudadano_tipo_documento'), table_name='ciudadano')
    op.drop_index(op.f('ix_ciudadano_numero_documento'), table_name='ciudadano')
    op.drop_index(op.f('ix_ciudadano_nombre'), table_name='ciudadano')
    op.drop_index(op.f('ix_ciudadano_codigo_ciudadano'), table_name='ciudadano')
    op.drop_index(op.f('ix_ciudadano_apellido'), table_name='ciudadano')
    op.drop_table('ciudadano')
    op.drop_index('idx_capa_hidrografia_geometria', table_name='capa_hidrografia', postgresql_using='gist')
    op.drop_table('capa_hidrografia')
    op.drop_table('antecedente_epidemiologico')
    # ### end Alembic commands ###
