# Dockerfile optimizado para DESARROLLO con hot-reload y caché de dependencias
# Este Dockerfile mantiene las dependencias en caché y solo las reinstala cuando cambian

FROM python:3.11-slim

# Instalar dependencias del sistema una sola vez (se cachea en la capa)
RUN apt-get update && apt-get install -y \
    libpq5 \
    libmagic1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Instalar uv para gestión rápida de dependencias
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Configurar directorio de trabajo
WORKDIR /app

# Variables de entorno para desarrollo
ENV PYTHONPATH=/app
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV UV_COMPILE_BYTECODE=1
ENV UV_LINK_MODE=copy

# Copiar SOLO archivos de dependencias primero (para aprovechar caché de Docker)
# Esto significa que las dependencias solo se reinstalan si pyproject.toml o uv.lock cambian
COPY pyproject.toml uv.lock ./

# Crear un README.md vacío temporalmente (requerido por pyproject.toml)
RUN touch README.md

# Crear estructura mínima para que uv sync funcione
RUN mkdir -p app

# Instalar dependencias con uv (mucho más rápido que pip)
# Esta capa se cachea hasta que cambien pyproject.toml o uv.lock
RUN uv sync --frozen --all-extras --no-install-project

# Copiar el resto del código (esto cambia frecuentemente, por eso va al final)
COPY . .

# Instalar el proyecto en modo editable ahora que tenemos el código completo
RUN uv sync --frozen --all-extras

# Crear directorios necesarios
RUN mkdir -p /app/uploads /app/logs

# Exponer puerto
EXPOSE 8000

# Comando por defecto para desarrollo con hot-reload
CMD ["uv", "run", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]