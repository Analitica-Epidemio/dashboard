#!/usr/bin/env python3
"""
Script de validaci√≥n COMPLETA de importaci√≥n de eventos de Dengue.
Valida que se hayan importado exactamente 403 eventos y que TODOS LOS DATOS sean correctos.
"""
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any
from collections import defaultdict

import pandas as pd
from sqlalchemy import create_engine, select, func
from sqlalchemy.orm import Session

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent.parent))

from app.domains.eventos_epidemiologicos.eventos.models import Evento, TipoEno
from app.domains.sujetos_epidemiologicos.ciudadanos_models import Ciudadano
from app.domains.territorio.establecimientos_models import Establecimiento
from app.domains.territorio.geografia_models import Provincia, Departamento, Localidad
from app.domains.atencion_medica.salud_models import Sintoma, MuestraEvento as Muestra


def parse_date(date_val):
    """Parsear fecha del CSV a objeto date."""
    if pd.isna(date_val) or not str(date_val).strip():
        return None

    for fmt in ['%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y']:
        try:
            return datetime.strptime(str(date_val).strip(), fmt).date()
        except:
            continue
    return None


class ValidationReport:
    """Clase para generar el reporte de validaci√≥n."""

    def __init__(self):
        self.sections = []
        self.total_checks = 0
        self.passed_checks = 0
        self.failed_checks = 0
        self.warnings = []
        self.errors = []

    def add_section(self, title: str, content: str):
        """Agrega una secci√≥n al reporte."""
        self.sections.append((title, content))

    def add_check(self, passed: bool, description: str):
        """Registra una validaci√≥n."""
        self.total_checks += 1
        if passed:
            self.passed_checks += 1
        else:
            self.failed_checks += 1
            self.errors.append(description)

    def add_warning(self, message: str):
        """Agrega una advertencia."""
        self.warnings.append(message)

    def print_report(self):
        """Imprime el reporte completo."""
        print("\n" + "="*100)
        print("üìä REPORTE DE VALIDACI√ìN COMPLETA - IMPORTACI√ìN DENGUE 2024")
        print("="*100 + "\n")

        for title, content in self.sections:
            print(f"\n{'‚îÄ'*100}")
            print(f"üìå {title}")
            print(f"{'‚îÄ'*100}")
            print(content)

        # Resumen de validaciones
        print(f"\n{'='*100}")
        print("‚úÖ RESUMEN DE VALIDACIONES")
        print(f"{'='*100}\n")
        print(f"Total de validaciones: {self.total_checks}")
        print(f"  ‚úÖ Pasadas: {self.passed_checks}")
        print(f"  ‚ùå Fallidas: {self.failed_checks}")

        if self.total_checks > 0:
            success_rate = (self.passed_checks / self.total_checks) * 100
            print(f"\nüìä Tasa de √©xito: {success_rate:.1f}%")

        # Advertencias
        if self.warnings:
            print(f"\n‚ö†Ô∏è  ADVERTENCIAS ({len(self.warnings)}):")
            for i, warning in enumerate(self.warnings, 1):
                print(f"  {i}. {warning}")

        # Errores
        if self.errors:
            print(f"\n‚ùå ERRORES ({len(self.errors)}):")
            for i, error in enumerate(self.errors, 1):
                print(f"  {i}. {error}")

        # Conclusi√≥n
        print(f"\n{'='*100}")
        if self.failed_checks == 0:
            print("üéâ IMPORTACI√ìN EXITOSA - Todos los datos validados correctamente")
        else:
            print(f"‚ö†Ô∏è  IMPORTACI√ìN INCOMPLETA - {self.failed_checks} validaciones fallidas")
        print(f"{'='*100}\n")


def validate_count_and_type(session: Session, df: pd.DataFrame, report: ValidationReport):
    """Valida cantidad y tipo de eventos de Dengue."""

    # Contar eventos √∫nicos en CSV
    eventos_csv = df['IDEVENTOCASO'].nunique()

    # Obtener tipo Dengue (en min√∫scula)
    stmt = select(TipoEno).where(TipoEno.codigo == "dengue")
    tipo_dengue = session.execute(stmt).scalar_one_or_none()

    if not tipo_dengue:
        content = "‚ùå Tipo de evento Dengue (c√≥digo 'dengue') no encontrado en la base de datos"
        report.add_check(False, "Tipo Dengue no existe en DB")
        report.add_section("1. VALIDACI√ìN DE TIPO Y CANTIDAD DE EVENTOS", content)
        return None

    # Contar eventos de tipo Dengue en DB
    stmt = select(func.count()).select_from(Evento).where(Evento.id_tipo_eno == tipo_dengue.id)
    eventos_dengue_db = session.execute(stmt).scalar()

    content = f"Eventos √∫nicos en CSV: {eventos_csv}\n"
    content += f"Tipo Dengue encontrado (c√≥digo='{tipo_dengue.codigo}', id={tipo_dengue.id})\n"
    content += f"Eventos de Dengue en DB: {eventos_dengue_db}\n"

    if eventos_csv == 403:
        content += "‚úÖ CSV contiene exactamente 403 eventos\n"
        report.add_check(True, "CSV contiene 403 eventos")
    else:
        content += f"‚ùå CSV tiene {eventos_csv} eventos (esperado: 403)\n"
        report.add_check(False, f"CSV tiene {eventos_csv} eventos")

    if eventos_dengue_db == 403:
        content += "‚úÖ DB contiene exactamente 403 eventos de Dengue"
        report.add_check(True, "DB contiene 403 eventos de Dengue")
    else:
        content += f"‚ùå DB tiene {eventos_dengue_db} eventos de Dengue (esperado: 403)"
        report.add_check(False, f"DB tiene {eventos_dengue_db} eventos de Dengue")

    report.add_section("1. VALIDACI√ìN DE TIPO Y CANTIDAD DE EVENTOS", content)
    return tipo_dengue.id


def validate_eventos_data(session: Session, df: pd.DataFrame, report: ValidationReport, id_tipo_dengue: int):
    """Valida que los datos de los eventos sean correctos comparando con CSV."""

    # DEBUG: Columnas de fecha
    print("\nüîç DEBUG - FECHAS EN CSV:")
    fecha_cols = [col for col in df.columns if 'FECHA' in col or 'FTM' in col]
    print(f"   Columnas de fecha encontradas: {fecha_cols[:10]}")

    # Cargar eventos de Dengue
    stmt = select(Evento).where(Evento.id_tipo_eno == id_tipo_dengue)
    eventos_db = {e.id_evento_caso: e for e in session.execute(stmt).scalars().all()}

    # Agrupar CSV por IDEVENTOCASO
    df_grouped = df.groupby('IDEVENTOCASO')

    # Contadores
    eventos_ok = 0
    eventos_fail = 0
    errores_fechas = []
    errores_fechas_detallados = []
    errores_ciudadano = []
    errores_establecimiento = []

    sample_size = min(100, len(df_grouped))
    for id_evento_caso, grupo in list(df_grouped)[:sample_size]:
        evento_db = eventos_db.get(int(id_evento_caso))

        if not evento_db:
            eventos_fail += 1
            continue

        primera_fila = grupo.iloc[0]
        tiene_error = False

        # Validar fecha_minima_evento (4 columnas)
        fechas_csv = []
        for col in ['FECHA_APERTURA', 'FECHA_INICIO_SINTOMA', 'FECHA_CONSULTA', 'FTM']:
            fecha = parse_date(primera_fila.get(col))
            if fecha:
                fechas_csv.append(fecha)

        fecha_esperada = min(fechas_csv) if fechas_csv else None
        if fecha_esperada != evento_db.fecha_minima_evento:
            errores_fechas.append(f"Evento {id_evento_caso}: esperado {fecha_esperada}, obtenido {evento_db.fecha_minima_evento}")
            if len(errores_fechas_detallados) < 3:
                detalle = f"Evento {id_evento_caso}:\n"
                detalle += f"      FECHA_APERTURA: {parse_date(primera_fila.get('FECHA_APERTURA'))}\n"
                detalle += f"      FECHA_INICIO_SINTOMA: {parse_date(primera_fila.get('FECHA_INICIO_SINTOMA'))}\n"
                detalle += f"      FECHA_CONSULTA: {parse_date(primera_fila.get('FECHA_CONSULTA'))}\n"
                detalle += f"      FTM: {parse_date(primera_fila.get('FTM'))}\n"
                detalle += f"      ‚Üí Esperado: {fecha_esperada}, DB: {evento_db.fecha_minima_evento}"
                errores_fechas_detallados.append(detalle)
            tiene_error = True

        # Validar c√≥digo ciudadano
        if 'CODIGO_CIUDADANO' in primera_fila and pd.notna(primera_fila['CODIGO_CIUDADANO']):
            codigo_csv = int(primera_fila['CODIGO_CIUDADANO'])
            if codigo_csv != evento_db.codigo_ciudadano:
                errores_ciudadano.append(f"Evento {id_evento_caso}: esperado c√≥digo {codigo_csv}, obtenido {evento_db.codigo_ciudadano}")
                tiene_error = True

        if not tiene_error:
            eventos_ok += 1
        else:
            eventos_fail += 1

    content = f"Eventos validados: {sample_size}\n"
    content += f"  ‚úÖ Datos correctos: {eventos_ok}\n"
    content += f"  ‚ùå Datos incorrectos: {eventos_fail}\n\n"

    if errores_fechas:
        content += f"Errores en fechas (total: {len(errores_fechas)}):\n\n"
        for detalle in errores_fechas_detallados:
            content += f"  {detalle}\n"

    if errores_ciudadano:
        content += f"\nErrores en ciudadanos ({len(errores_ciudadano[:5])} primeros):\n"
        for error in errores_ciudadano[:5]:
            content += f"  - {error}\n"

    if eventos_fail == 0:
        content += "\n‚úÖ Todos los datos de eventos son correctos"
        report.add_check(True, "Datos de eventos correctos")
    else:
        content += f"\n‚ùå {eventos_fail} eventos con datos incorrectos"
        report.add_check(False, f"{eventos_fail} eventos con datos incorrectos")

    report.add_section("2. VALIDACI√ìN DE DATOS DE EVENTOS", content)


def validate_sintomas_correctos(session: Session, df: pd.DataFrame, report: ValidationReport, id_tipo_dengue: int):
    """Valida que los s√≠ntomas sean los correctos del CSV."""

    # Contar s√≠ntomas en CSV
    sintomas_csv = df[df['SIGNO_SINTOMA'].notna()]
    total_sintomas_csv = len(sintomas_csv)
    eventos_con_sintomas_csv = sintomas_csv['IDEVENTOCASO'].nunique()

    # DEBUG: Mostrar ejemplos de s√≠ntomas del CSV
    print("\nüîç DEBUG - S√çNTOMAS EN CSV:")
    print(f"   Columnas relacionadas con s√≠ntomas: {[col for col in df.columns if 'SINTOMA' in col or 'SIGNO' in col]}")
    print(f"   Primeras 5 filas con s√≠ntomas:")
    for idx, row in sintomas_csv.head(5).iterrows():
        print(f"   - Evento {row['IDEVENTOCASO']}: '{row['SIGNO_SINTOMA']}' (ID_SNVS: {row.get('ID_SNVS_SIGNO_SINTOMA', 'N/A')})")

    # Verificar si existe la tabla de s√≠ntomas
    stmt = select(func.count()).select_from(Sintoma)
    total_sintomas_catalogo = session.execute(stmt).scalar()
    print(f"   S√≠ntomas en cat√°logo DB: {total_sintomas_catalogo}")

    # Cargar eventos de Dengue con s√≠ntomas
    stmt = select(Evento).where(Evento.id_tipo_eno == id_tipo_dengue)
    eventos_db = session.execute(stmt).scalars().all()

    total_sintomas_db = sum(len(e.sintomas) if e.sintomas else 0 for e in eventos_db)
    eventos_con_sintomas_db = sum(1 for e in eventos_db if e.sintomas and len(e.sintomas) > 0)

    # DEBUG: Verificar si hay relaciones en DetalleEventoSintomas
    from app.domains.eventos_epidemiologicos.eventos.models import DetalleEventoSintomas
    stmt = select(func.count()).select_from(DetalleEventoSintomas)
    total_relaciones = session.execute(stmt).scalar()
    print(f"   Relaciones DetalleEventoSintomas en DB: {total_relaciones}")

    content = f"S√≠ntomas en CSV:\n"
    content += f"  Total de filas con s√≠ntomas: {total_sintomas_csv}\n"
    content += f"  Eventos con s√≠ntomas: {eventos_con_sintomas_csv}\n"
    content += f"  S√≠ntomas √∫nicos: {sintomas_csv['SIGNO_SINTOMA'].nunique()}\n\n"

    content += f"S√≠ntomas en DB:\n"
    content += f"  Cat√°logo de s√≠ntomas: {total_sintomas_catalogo}\n"
    content += f"  Relaciones evento-s√≠ntoma: {total_relaciones}\n"
    content += f"  Total de s√≠ntomas asociados: {total_sintomas_db}\n"
    content += f"  Eventos con s√≠ntomas: {eventos_con_sintomas_db}\n\n"

    # Validar que el conteo sea similar
    if total_sintomas_db == 0:
        content += f"‚ùå NO hay s√≠ntomas asociados a eventos (deber√≠a haber ~{total_sintomas_csv})\n"
        if total_sintomas_catalogo > 0:
            content += f"   ‚ö†Ô∏è  IMPORTANTE: Hay {total_sintomas_catalogo} s√≠ntomas en el cat√°logo pero NO est√°n asociados a eventos\n"
            content += f"   Esto indica que el procesador est√° creando s√≠ntomas pero NO est√° creando las relaciones DetalleEventoSintomas\n"
        report.add_check(False, "No hay s√≠ntomas asociados a eventos")
        report.add_warning(f"Se esperaban ~{total_sintomas_csv} s√≠ntomas pero hay 0 asociados")
    elif abs(total_sintomas_db - total_sintomas_csv) / total_sintomas_csv < 0.1:  # 10% de diferencia
        content += f"‚úÖ Cantidad de s√≠ntomas similar a CSV (¬±10%)"
        report.add_check(True, "S√≠ntomas importados correctamente")
    else:
        content += f"‚ö†Ô∏è  Diferencia significativa: CSV tiene {total_sintomas_csv}, DB tiene {total_sintomas_db}"
        report.add_warning(f"Diferencia en cantidad de s√≠ntomas: {abs(total_sintomas_db - total_sintomas_csv)}")

    report.add_section("3. VALIDACI√ìN DE S√çNTOMAS", content)


def validate_muestras(session: Session, df: pd.DataFrame, report: ValidationReport, id_tipo_dengue: int):
    """Valida que las muestras est√©n correctamente importadas."""

    # Buscar columnas de muestras en CSV
    columnas_muestras = [col for col in df.columns if 'MUESTRA' in col or 'FTM' in col or 'RESULTADO' in col]

    # Contar muestras en DB
    stmt = (
        select(func.count())
        .select_from(Muestra)
        .join(Evento, Muestra.id_evento == Evento.id)
        .where(Evento.id_tipo_eno == id_tipo_dengue)
    )
    total_muestras_db = session.execute(stmt).scalar()

    content = f"Columnas relacionadas con muestras en CSV:\n"
    for col in columnas_muestras[:10]:
        valores_no_vacios = df[col].notna().sum()
        content += f"  - {col}: {valores_no_vacios} valores no vac√≠os\n"

    content += f"\nMuestras en DB: {total_muestras_db}\n"

    if total_muestras_db == 0:
        content += "\n‚ö†Ô∏è  No hay muestras importadas - revisar procesador"
        report.add_warning("No hay muestras importadas")
    else:
        content += f"\n‚úÖ Hay {total_muestras_db} muestras importadas"
        report.add_check(True, f"{total_muestras_db} muestras importadas")

    report.add_section("4. VALIDACI√ìN DE MUESTRAS", content)


def validate_ciudadanos_correctos(session: Session, df: pd.DataFrame, report: ValidationReport, id_tipo_dengue: int):
    """Valida que los datos de ciudadanos sean los correctos."""

    # DEBUG: Ver columnas de sexo en CSV
    print("\nüîç DEBUG - SEXO EN CSV:")
    sexo_cols = [col for col in df.columns if 'SEXO' in col.upper()]
    print(f"   Columnas de sexo encontradas: {sexo_cols}")
    if sexo_cols:
        for col in sexo_cols:
            valores_unicos = df[col].dropna().unique()[:10]
            print(f"   Valores en '{col}': {valores_unicos}")

    # Cargar eventos de Dengue con ciudadanos
    stmt = (
        select(Evento, Ciudadano)
        .outerjoin(Ciudadano, Evento.codigo_ciudadano == Ciudadano.codigo_ciudadano)
        .where(Evento.id_tipo_eno == id_tipo_dengue)
        .limit(50)
    )
    results = session.execute(stmt).all()

    nombres_ok = 0
    nombres_fail = 0
    sexo_ok = 0
    sexo_fail = 0
    sexo_errores = []
    documentos_ok = 0
    documentos_fail = 0

    for evento, ciudadano in results:
        if not ciudadano:
            continue

        # Buscar en CSV
        csv_rows = df[df['IDEVENTOCASO'] == evento.id_evento_caso]
        if len(csv_rows) == 0:
            continue

        csv_row = csv_rows.iloc[0]

        # Validar nombre y apellido
        if 'NOMBRE' in csv_row and 'APELLIDO' in csv_row:
            nombre_csv = str(csv_row['NOMBRE']).strip().upper()
            apellido_csv = str(csv_row['APELLIDO']).strip().upper()
            nombre_db = str(ciudadano.nombre or '').strip().upper()
            apellido_db = str(ciudadano.apellido or '').strip().upper()

            if nombre_csv == nombre_db and apellido_csv == apellido_db:
                nombres_ok += 1
            else:
                nombres_fail += 1

        # Validar sexo
        if 'SEXO' in csv_row and pd.notna(csv_row['SEXO']):
            sexo_csv = str(csv_row['SEXO']).strip().upper()
            sexo_db = str(ciudadano.sexo_biologico or '').strip().upper() if ciudadano.sexo_biologico else None

            # Mapeo de valores comunes
            if sexo_csv in ['F', 'FEMENINO', 'MUJER'] and sexo_db in ['F', 'FEMENINO', 'MUJER']:
                sexo_ok += 1
            elif sexo_csv in ['M', 'MASCULINO', 'HOMBRE', 'VARON'] and sexo_db in ['M', 'MASCULINO', 'HOMBRE', 'VARON']:
                sexo_ok += 1
            elif sexo_csv == sexo_db:
                sexo_ok += 1
            else:
                sexo_fail += 1
                if len(sexo_errores) < 5:
                    sexo_errores.append(f"Evento {evento.id_evento_caso}: CSV='{sexo_csv}' vs DB='{sexo_db}'")

        # Validar documento
        if 'NUMERO_DOCUMENTO' in csv_row and pd.notna(csv_row['NUMERO_DOCUMENTO']):
            doc_csv = int(csv_row['NUMERO_DOCUMENTO'])
            if doc_csv == ciudadano.numero_documento:
                documentos_ok += 1
            else:
                documentos_fail += 1

    content = f"Validaci√≥n de ciudadanos (muestra de 50 eventos):\n\n"
    content += f"Nombres y apellidos:\n"
    content += f"  ‚úÖ Correctos: {nombres_ok}\n"
    content += f"  ‚ùå Incorrectos: {nombres_fail}\n\n"

    content += f"Sexo:\n"
    content += f"  ‚úÖ Correcto: {sexo_ok}\n"
    content += f"  ‚ùå Incorrecto: {sexo_fail}\n"
    if sexo_errores:
        content += f"\n  Ejemplos de errores de sexo:\n"
        for error in sexo_errores:
            content += f"    - {error}\n"
    content += "\n"

    content += f"Documentos:\n"
    content += f"  ‚úÖ Correctos: {documentos_ok}\n"
    content += f"  ‚ùå Incorrectos: {documentos_fail}\n"

    total_validaciones = nombres_ok + nombres_fail + sexo_ok + sexo_fail + documentos_ok + documentos_fail
    total_ok = nombres_ok + sexo_ok + documentos_ok
    total_fail = nombres_fail + sexo_fail + documentos_fail

    if total_fail == 0 and total_validaciones > 0:
        content += "\n‚úÖ Todos los datos de ciudadanos validados son correctos"
        report.add_check(True, "Datos de ciudadanos correctos")
    elif total_validaciones > 0:
        content += f"\n‚ö†Ô∏è  {total_fail} de {total_validaciones} validaciones fallidas"
        report.add_check(False, f"{total_fail} datos de ciudadanos incorrectos")

    report.add_section("5. VALIDACI√ìN DE DATOS DE CIUDADANOS", content)


def main():
    """Ejecuta la validaci√≥n completa."""

    # Ruta al CSV (inside Docker container)
    csv_path = '/app/Meningitis 2024 y 2023.xlsx - Hoja 1(1).csv'

    if not os.path.exists(csv_path):
        print(f"‚ùå Archivo CSV no encontrado: {csv_path}")
        return

    print("\nüîç Cargando CSV...")
    df = pd.read_csv(csv_path)
    print(f"   Total de filas en CSV: {len(df)}")

    # Conectar a la base de datos
    DATABASE_URL = os.getenv(
        "DATABASE_URL",
        "postgresql://epidemiologia_user:epidemiologia_password@localhost:5433/epidemiologia_db"
    )
    if "postgresql+asyncpg" in DATABASE_URL:
        DATABASE_URL = DATABASE_URL.replace("postgresql+asyncpg://", "postgresql://")

    print(f"üîå Conectando a la base de datos...")
    engine = create_engine(DATABASE_URL)

    # Crear reporte
    report = ValidationReport()

    with Session(engine) as session:
        # Ejecutar todas las validaciones
        id_tipo_dengue = validate_count_and_type(session, df, report)

        if id_tipo_dengue is None:
            print("\n‚ö†Ô∏è  No se puede continuar: tipo Dengue no encontrado")
            report.print_report()
            return

        validate_eventos_data(session, df, report, id_tipo_dengue)
        validate_sintomas_correctos(session, df, report, id_tipo_dengue)
        validate_muestras(session, df, report, id_tipo_dengue)
        validate_ciudadanos_correctos(session, df, report, id_tipo_dengue)

    # Imprimir reporte
    report.print_report()


if __name__ == "__main__":
    main()
