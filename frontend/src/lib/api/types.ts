/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login
         * @description Authenticate user and return JWT tokens
         *
         *     - **email**: User's email address
         *     - **password**: User's password
         *     - **remember_me**: Keep session active for 7 days (default: false)
         *
         *     Returns access token (30 min) and refresh token (7 days)
         */
        post: operations["login_api_v1_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Access Token
         * @description Refresh access token using refresh token
         *
         *     Returns new access token and optionally new refresh token
         */
        post: operations["refresh_access_token_api_v1_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout current session
         */
        post: operations["logout_api_v1_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/logout-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout All Sessions
         * @description Logout from all sessions
         */
        post: operations["logout_all_sessions_api_v1_auth_logout_all_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User Info
         * @description Get current user information
         */
        get: operations["get_current_user_info_api_v1_auth_me_get"];
        /**
         * Update Current User
         * @description Update current user information
         *
         *     Users can update their own profile information.
         *     Role and status changes require superadmin privileges.
         */
        put: operations["update_current_user_api_v1_auth_me_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Password
         * @description Change current user's password
         *
         *     - **current_password**: Current password
         *     - **new_password**: New strong password
         *
         *     This will logout all other sessions for security.
         */
        post: operations["change_password_api_v1_auth_change_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Sessions
         * @description Get current user's active sessions
         */
        get: operations["get_user_sessions_api_v1_auth_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/sessions/{session_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Logout Session
         * @description Logout specific session
         */
        delete: operations["logout_session_api_v1_auth_sessions__session_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description List all users (Superadmin only)
         *
         *     - **skip**: Number of users to skip
         *     - **limit**: Maximum number of users to return
         */
        get: operations["list_users_api_v1_auth_users_get"];
        put?: never;
        /**
         * Create User
         * @description Create a new user (Superadmin only - for UI administration)
         *
         *     - **email**: Valid email address
         *     - **nombre**: First name
         *     - **apellido**: Last name
         *     - **password**: Strong password (min 8 chars, must include uppercase, lowercase, digit, special char)
         *     - **role**: User role (superadmin, epidemiologo)
         */
        post: operations["create_user_api_v1_auth_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description Get user by ID (Superadmin only)
         */
        get: operations["get_user_api_v1_auth_users__user_id__get"];
        /**
         * Update User
         * @description Update user by ID (Superadmin only)
         *
         *     Superadmins can update any user's information including role and status.
         */
        put: operations["update_user_api_v1_auth_users__user_id__put"];
        post?: never;
        /**
         * Deactivate User
         * @description Deactivate user (Superadmin only)
         *
         *     This sets the user status to inactive rather than deleting the record.
         */
        delete: operations["deactivate_user_api_v1_auth_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/users/{user_id}/unlock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unlock User
         * @description Unlock user account (Superadmin only)
         *
         *     Clears login attempts and unlock time.
         */
        post: operations["unlock_user_api_v1_auth_users__user_id__unlock_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads/csv-async": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Csv Async
         * @description Procesamiento asíncrono de CSV con Celery.
         *
         *     **Arquitectura moderna:**
         *     1. Cliente sube CSV convertido desde Excel
         *     2. Servidor crea job asíncrono
         *     3. Celery worker procesa en background
         *     4. Cliente hace polling del estado
         *
         *     **Ventajas:**
         *     - No bloquea la UI
         *     - Procesa archivos grandes sin timeout
         *     - Progress tracking en tiempo real
         *     - Error handling robusto
         *
         *     **Returns:** Job ID para seguimiento del progreso
         */
        post: operations["upload_csv_async_api_v1_uploads_csv_async_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads/jobs/{job_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Status
         * @description Obtener estado de un job de procesamiento.
         *
         *     **Polling endpoint** para seguimiento en tiempo real:
         *     - Progreso percentage (0-100)
         *     - Paso actual de procesamiento
         *     - Errores si los hay
         *     - Resultado final cuando completa
         *
         *     **Estados posibles:**
         *     - `pending`: En cola esperando
         *     - `in_progress`: Procesando activamente
         *     - `completed`: Completado exitosamente
         *     - `failed`: Error en procesamiento
         *     - `cancelled`: Cancelado por usuario
         */
        get: operations["get_job_status_api_v1_uploads_jobs__job_id__status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/uploads/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel Job
         * @description Cancelar un job en progreso.
         *
         *     **Funcionalidad:**
         *     - Revoca la task de Celery
         *     - Marca el job como cancelado
         *     - Limpia archivos temporales
         *
         *     **Limitaciones:**
         *     - Solo jobs en estado `pending` o `in_progress`
         *     - Jobs completados no se pueden cancelar
         */
        delete: operations["cancel_job_api_v1_uploads_jobs__job_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/dashboard/resumen": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Resumen
         * @description Obtiene estadísticas resumen del dashboard:
         *     - Tabla resumen con totales
         *     - Eventos más típicos
         *     - Grupos más típicos
         *     - Pirámide poblacional
         *     - Territorios afectados (jerárquico)
         */
        get: operations["get_dashboard_resumen_api_v1_dashboard_resumen_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/estrategias/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Strategies
         * @description Listar todas las estrategias de clasificación.
         *
         *     **Filtros opcionales:**
         *     - `active_only`: Solo estrategias activas
         *     - `tipo_eno_id`: Filtrar por tipo de evento específico
         *
         *     **Returns:** Lista de estrategias con metadatos
         */
        get: operations["list_strategies_api_v1_estrategias__get"];
        put?: never;
        /**
         * Create Strategy
         * @description Crear nueva estrategia de clasificación.
         *
         *     **Validaciones:**
         *     - Nombre único
         *     - Tipo de evento válido
         *     - Al menos una regla de clasificación
         *     - Prioridades de reglas consistentes
         *
         *     **Returns:** Estrategia creada con ID asignado
         */
        post: operations["create_strategy_api_v1_estrategias__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/estrategias/{strategy_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Strategy
         * @description Obtener una estrategia específica por ID.
         *
         *     **Returns:** Estrategia completa con reglas y metadatos
         */
        get: operations["get_strategy_api_v1_estrategias__strategy_id__get"];
        /**
         * Update Strategy
         * @description Actualizar estrategia existente.
         *
         *     **Funcionalidades:**
         *     - Actualización parcial (solo campos proporcionados)
         *     - Validación de reglas modificadas
         *     - Auditoría automática de cambios
         *
         *     **Returns:** Estrategia actualizada
         */
        put: operations["update_strategy_api_v1_estrategias__strategy_id__put"];
        post?: never;
        /**
         * Delete Strategy
         * @description Eliminar estrategia.
         *
         *     **Restricciones:**
         *     - No se pueden eliminar estrategias activas (usar force=true para anular)
         *     - Se eliminan también las reglas asociadas
         *     - Acción no reversible
         *
         *     **Parámetros:**
         *     - `force`: Permitir eliminar estrategias activas
         */
        delete: operations["delete_strategy_api_v1_estrategias__strategy_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/estrategias/{strategy_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate Strategy
         * @description Activar estrategia.
         *
         *     **Funcionalidades:**
         *     - Desactiva automáticamente otras estrategias del mismo evento
         *     - Valida que la estrategia esté completa
         *     - Registra cambio en auditoría
         */
        post: operations["activate_strategy_api_v1_estrategias__strategy_id__activate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/estrategias/{strategy_id}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test Strategy
         * @description Probar estrategia con datos de ejemplo.
         *
         *     **Funcionalidades:**
         *     - Aplica la estrategia a datos CSV de prueba
         *     - Muestra resultados sin persistir
         *     - Útil para validar reglas antes de activar
         *
         *     **Returns:** Resultados de clasificación simulados
         */
        post: operations["test_strategy_api_v1_estrategias__strategy_id__test_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/estrategias/{strategy_id}/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Strategy Audit Log
         * @description Obtener historial de auditoría de una estrategia.
         *
         *     **Returns:** Lista de cambios realizados ordenados por fecha
         */
        get: operations["get_strategy_audit_log_api_v1_estrategias__strategy_id__audit_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/eventos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Eventos
         * @description Lista eventos epidemiológicos con filtros y paginación.
         *
         *     **Características:**
         *     - Búsqueda por ID evento, nombre ciudadano o documento
         *     - Filtros múltiples combinables
         *     - Paginación eficiente
         *     - Incluye conteos de relaciones
         *
         *     **Performance:**
         *     - Usa índices optimizados
         *     - Carga solo datos necesarios para listado
         *     - Límite máximo 200 registros por página
         */
        get: operations["list_eventos_api_v1_eventos__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/eventos/mapa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Eventos Mapa
         * @description Obtiene eventos agrupados por ubicación geográfica para visualización en mapa.
         *
         *     Permite visualización jerárquica:
         *     - nivel=provincia: Muestra todas las provincias con conteo de eventos
         *     - nivel=departamento: Requiere id_provincia_indec, muestra departamentos de esa provincia
         *     - nivel=localidad: Requiere id_provincia_indec e id_departamento_indec, muestra localidades
         */
        get: operations["get_eventos_mapa_api_v1_eventos_mapa_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/eventos/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Eventos
         * @description Exporta eventos filtrados a CSV o Excel.
         *
         *     **Limitaciones:**
         *     - Máximo 10,000 registros por exportación
         *     - Incluye solo datos básicos (no relaciones completas)
         */
        get: operations["export_eventos_api_v1_eventos_export_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/eventos/{evento_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Evento Detail
         * @description Obtiene el detalle completo de un evento.
         *
         *     **Incluye:**
         *     - Datos completos del evento
         *     - Información del ciudadano o animal
         *     - Síntomas, muestras, diagnósticos
         *     - Metadata de clasificación
         *     - Timeline de eventos
         */
        get: operations["get_evento_detail_api_v1_eventos__evento_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/eventos/{evento_id}/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Evento Timeline
         * @description Obtiene el timeline cronológico de un evento.
         *
         *     **Incluye eventos de:**
         *     - Inicio de síntomas
         *     - Consultas médicas
         *     - Toma de muestras
         *     - Resultados de laboratorio
         *     - Diagnósticos
         *     - Internaciones
         *     - Vacunaciones
         *
         *     Ordenado cronológicamente.
         */
        get: operations["get_evento_timeline_api_v1_eventos__evento_id__timeline_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/personas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Personas
         * @description Lista personas (ciudadanos/animales) con sus eventos agrupados.
         *
         *     **Vista PERSON-CENTERED optimizada:**
         *     - Usa agregaciones SQL para máxima performance
         *     - Evita N+1 queries
         *     - Procesa TODO en base de datos
         */
        get: operations["list_personas_api_v1_personas__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/personas/{tipo_sujeto}/{persona_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Persona Detail
         * @description Obtiene el detalle completo de una persona (ciudadano o animal).
         *
         *     **Vista PERSON-CENTERED:**
         *     - Toda la información de la persona
         *     - TODOS sus eventos completos con síntomas, muestras, estudios, etc.
         *     - Estadísticas agregadas por tipo de evento
         */
        get: operations["get_persona_detail_api_v1_personas__tipo_sujeto___persona_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/personas/{tipo_sujeto}/{persona_id}/timeline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Persona Timeline
         * @description Obtiene el timeline completo de una persona.
         *
         *     **Vista PERSON-CENTERED:**
         *     - Timeline unificado de TODOS los eventos de la persona
         *     - Incluye eventos, síntomas, muestras, diagnósticos, vacunas, internaciones
         *     - Ordenado cronológicamente
         *     - Ideal para visualización de historia clínica/epidemiológica
         *
         *     **Casos de uso:**
         *     - Investigación de casos complejos
         *     - Seguimiento de casos recurrentes
         *     - Análisis de evolución temporal
         *     - Generación de reportes de caso
         */
        get: operations["get_persona_timeline_api_v1_personas__tipo_sujeto___persona_id__timeline_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/tiposEno/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Tipos Eno */
        get: operations["list_tipos_eno_api_v1_tiposEno__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/gruposEno/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Grupos Eno */
        get: operations["list_grupos_eno_api_v1_gruposEno__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/charts/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Dashboard Charts
         * @description Obtiene los charts aplicables y sus datos según los filtros
         *
         *     Simple:
         *     1. Busca qué charts aplican según las condiciones
         *     2. Procesa los datos de cada chart
         *     3. Devuelve todo listo para renderizar
         */
        get: operations["get_dashboard_charts_api_v1_charts_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/charts/indicadores": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Indicadores
         * @description Obtiene los indicadores de resumen para el dashboard
         *
         *     Calcula:
         *     - Total de casos
         *     - Tasa de incidencia (por 100.000 habitantes)
         *     - Áreas afectadas (departamentos únicos)
         *     - Letalidad (si hay datos de fallecidos)
         */
        get: operations["get_indicadores_api_v1_charts_indicadores_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/charts/disponibles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Charts Disponibles
         * @description Lista todos los charts disponibles sin procesar datos
         *     Útil para configuración y preview
         */
        get: operations["get_charts_disponibles_api_v1_charts_disponibles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/charts/mapa-geografico": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Mapa Geografico
         * @description Obtiene estadísticas por departamento para visualización en mapa
         *
         *     Incluye:
         *     - Casos por departamento
         *     - Tasa de incidencia
         *     - Información de zona UGD
         *     - Población
         */
        get: operations["get_mapa_geografico_api_v1_charts_mapa_geografico_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Report
         * @description Genera un reporte PDF usando Playwright para capturar la página del frontend.
         *     Esto asegura fidelidad exacta de la UI en los PDFs generados.
         */
        post: operations["generate_report_api_v1_reports_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/generate-zip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Zip Report
         * @description Generate ZIP report with multiple PDFs (one per combination) generated in parallel.
         *     Each PDF contains all charts for that combination.
         */
        post: operations["generate_zip_report_api_v1_reports_generate_zip_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview Report
         * @description Obtiene los datos que se incluirían en el reporte sin generar el PDF
         *     Útil para preview en el frontend
         */
        post: operations["preview_report_api_v1_reports_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/generate-signed-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate signed URL for SSR reports
         * @description Creates a signed URL that allows access to SSR reports without authentication
         */
        post: operations["generate_report_signed_url_api_v1_reports_generate_signed_url_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/reports/verify-signed-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify signed URL
         * @description Verifies a signed URL and returns the filters data if valid
         */
        post: operations["verify_signed_url_endpoint_api_v1_reports_verify_signed_url_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Root
         * @description Endpoint raíz de la API v1
         */
        get: operations["api_root_api_v1__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AmbitoConcurrenciaInfo
         * @description Información de ámbito de concurrencia
         */
        AmbitoConcurrenciaInfo: {
            /**
             * Id
             * @description ID del ámbito
             */
            id: number;
            /**
             * Nombre Lugar
             * @description Nombre del lugar
             */
            nombre_lugar?: string | null;
            /**
             * Tipo Lugar
             * @description Tipo de lugar
             */
            tipo_lugar?: string | null;
            /**
             * Localidad
             * @description Localidad del ámbito
             */
            localidad?: string | null;
            /**
             * Fecha Ocurrencia
             * @description Fecha de ocurrencia
             */
            fecha_ocurrencia?: string | null;
            /**
             * Frecuencia Concurrencia
             * @description Frecuencia de concurrencia
             */
            frecuencia_concurrencia?: string | null;
        };
        /**
         * AnimalInfo
         * @description Información del animal
         */
        AnimalInfo: {
            /**
             * Id
             * @description ID del animal
             */
            id: number;
            /**
             * Identificacion
             * @description Identificación del animal
             */
            identificacion?: string | null;
            /**
             * Especie
             * @description Especie
             */
            especie?: string | null;
            /**
             * Raza
             * @description Raza
             */
            raza?: string | null;
            /**
             * Provincia
             * @description Provincia
             */
            provincia?: string | null;
            /**
             * Localidad
             * @description Localidad
             */
            localidad?: string | null;
        };
        /**
         * AntecedenteInfo
         * @description Información de antecedente epidemiológico
         */
        AntecedenteInfo: {
            /**
             * Id
             * @description ID del antecedente
             */
            id: number;
            /**
             * Descripcion
             * @description Descripción del antecedente
             */
            descripcion?: string | null;
            /**
             * Fecha Antecedente
             * @description Fecha del antecedente
             */
            fecha_antecedente?: string | null;
        };
        /**
         * AsyncJobResponse
         * @description Respuesta cuando se inicia un job asíncrono.
         */
        AsyncJobResponse: {
            /**
             * Job Id
             * @description UUID del job para seguimiento
             */
            job_id: string;
            /** @description Estado inicial del job */
            status: components["schemas"]["JobStatus"];
            /**
             * Message
             * @description Mensaje informativo
             */
            message: string;
            /**
             * Polling Url
             * @description URL para consultar estado
             */
            polling_url: string;
        };
        /**
         * AuditAction
         * @description Acciones de auditoría.
         * @enum {string}
         */
        AuditAction: "CREATE" | "UPDATE" | "DELETE" | "ACTIVATE" | "DEACTIVATE";
        /**
         * AuditLogResponse
         * @description Response DTO para entradas de auditoría.
         */
        AuditLogResponse: {
            /**
             * Id
             * @description ID de la entrada de auditoría
             */
            id: number;
            /**
             * Strategy Id
             * @description ID de la estrategia
             */
            strategy_id: number;
            /**
             * Strategy Name
             * @description Nombre de la estrategia
             */
            strategy_name: string;
            /** @description Acción realizada */
            action: components["schemas"]["AuditAction"];
            /**
             * Field Changed
             * @description Campo modificado
             */
            field_changed?: string | null;
            /**
             * Old Value
             * @description Valor anterior
             */
            old_value?: string | null;
            /**
             * New Value
             * @description Nuevo valor
             */
            new_value?: string | null;
            /**
             * Changed By
             * @description Usuario que realizó el cambio
             */
            changed_by: string;
            /**
             * Changed At
             * Format: date-time
             * @description Fecha y hora del cambio
             */
            changed_at: string;
            /**
             * Ip Address
             * @description Dirección IP del usuario
             */
            ip_address?: string | null;
            /**
             * User Agent
             * @description User agent del navegador
             */
            user_agent?: string | null;
        };
        /** Body_upload_csv_async_api_v1_uploads_csv_async_post */
        Body_upload_csv_async_api_v1_uploads_csv_async_post: {
            /**
             * File
             * Format: binary
             * @description Archivo CSV epidemiológico
             */
            file: string;
            /**
             * Original Filename
             * @description Nombre del archivo Excel original
             */
            original_filename: string;
            /**
             * Sheet Name
             * @description Nombre de la hoja convertida
             */
            sheet_name: string;
        };
        /**
         * ChartDataItem
         * @description Modelo para un chart individual del dashboard
         */
        ChartDataItem: {
            /**
             * Codigo
             * @description Código único del chart
             */
            codigo: string;
            /**
             * Nombre
             * @description Nombre del chart
             */
            nombre: string;
            /**
             * Descripcion
             * @description Descripción del chart
             */
            descripcion?: string | null;
            /**
             * Tipo
             * @description Tipo de visualización
             */
            tipo: string;
            /**
             * Data
             * @description Datos del chart
             */
            data: unknown;
            /**
             * Config
             * @description Configuración adicional del chart
             */
            config?: {
                [key: string]: unknown;
            };
        };
        /**
         * ChartDisponibleItem
         * @description Modelo para un chart disponible en el catálogo
         */
        ChartDisponibleItem: {
            /**
             * Id
             * @description ID del chart
             */
            id: number;
            /**
             * Codigo
             * @description Código único del chart
             */
            codigo: string;
            /**
             * Nombre
             * @description Nombre del chart
             */
            nombre: string;
            /**
             * Descripcion
             * @description Descripción del chart
             */
            descripcion?: string | null;
            /**
             * Tipo Visualizacion
             * @description Tipo de visualización
             */
            tipo_visualizacion: string;
            /**
             * Condiciones
             * @description Condiciones de aplicación
             */
            condiciones?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * ChartsDisponiblesResponse
         * @description Response model para charts disponibles
         */
        ChartsDisponiblesResponse: {
            /**
             * Charts
             * @description Lista de charts disponibles
             */
            charts: components["schemas"]["ChartDisponibleItem"][];
            /**
             * Total
             * @description Total de charts disponibles
             */
            total: number;
        };
        /**
         * CiudadanoInfo
         * @description Información del ciudadano
         */
        CiudadanoInfo: {
            /**
             * Codigo
             * @description Código del ciudadano
             */
            codigo: number;
            /**
             * Nombre
             * @description Nombre
             */
            nombre: string;
            /**
             * Apellido
             * @description Apellido
             */
            apellido: string;
            /**
             * Documento
             * @description Número de documento
             */
            documento?: string | null;
            /**
             * Fecha Nacimiento
             * @description Fecha de nacimiento
             */
            fecha_nacimiento?: string | null;
            /**
             * Sexo
             * @description Sexo
             */
            sexo?: string | null;
            /**
             * Provincia
             * @description Provincia de residencia
             */
            provincia?: string | null;
            /**
             * Localidad
             * @description Localidad de residencia
             */
            localidad?: string | null;
            /**
             * Calle
             * @description Calle del domicilio
             */
            calle?: string | null;
            /**
             * Numero
             * @description Número del domicilio
             */
            numero?: string | null;
            /**
             * Barrio
             * @description Barrio popular
             */
            barrio?: string | null;
            /**
             * Telefono
             * @description Teléfono de contacto
             */
            telefono?: string | null;
            /**
             * Es Embarazada
             * @description Si está embarazada
             */
            es_embarazada?: boolean | null;
            /**
             * Cobertura Social
             * @description Cobertura social u obra social
             */
            cobertura_social?: string | null;
            /**
             * Ocupacion Laboral
             * @description Ocupación laboral
             */
            ocupacion_laboral?: string | null;
        };
        /**
         * ClassificationRuleRequest
         * @description Request DTO para reglas de clasificación.
         */
        ClassificationRuleRequest: {
            /** @description Tipo de clasificación resultante */
            classification: components["schemas"]["TipoClasificacion"];
            /**
             * Priority
             * @description Prioridad de la regla (1 = mayor prioridad)
             */
            priority: number;
            /**
             * Is Active
             * @description Si la regla está activa
             * @default true
             */
            is_active: boolean;
            /**
             * Auto Approve
             * @description Si los casos se aprueban automáticamente
             * @default true
             */
            auto_approve: boolean;
            /**
             * Required Confidence
             * @description Confianza mínima requerida (0.0-1.0)
             */
            required_confidence?: number | null;
            /**
             * Filters
             * @description Lista de condiciones de filtro
             * @default []
             */
            filters: components["schemas"]["FilterConditionRequest"][];
        };
        /**
         * ClassificationRuleResponse
         * @description Response DTO para reglas de clasificación.
         */
        ClassificationRuleResponse: {
            /** @description Tipo de clasificación resultante */
            classification: components["schemas"]["TipoClasificacion"];
            /**
             * Priority
             * @description Prioridad de la regla (1 = mayor prioridad)
             */
            priority: number;
            /**
             * Is Active
             * @description Si la regla está activa
             * @default true
             */
            is_active: boolean;
            /**
             * Auto Approve
             * @description Si los casos se aprueban automáticamente
             * @default true
             */
            auto_approve: boolean;
            /**
             * Required Confidence
             * @description Confianza mínima requerida (0.0-1.0)
             */
            required_confidence?: number | null;
            /**
             * Filters
             * @description Lista de filtros
             * @default []
             */
            filters: components["schemas"]["FilterConditionResponse"][];
            /**
             * Id
             * @description ID de la regla
             */
            id?: number | null;
            /**
             * Created At
             * @description Fecha de creación
             */
            created_at?: string | null;
            /**
             * Updated At
             * @description Fecha de última actualización
             */
            updated_at?: string | null;
        };
        /**
         * ContactoInfo
         * @description Información de contactos
         */
        ContactoInfo: {
            /**
             * Id
             * @description ID del registro de contactos
             */
            id: number;
            /**
             * Contacto Caso Confirmado
             * @description Contacto con caso confirmado
             */
            contacto_caso_confirmado?: boolean | null;
            /**
             * Contacto Caso Sospechoso
             * @description Contacto con caso sospechoso
             */
            contacto_caso_sospechoso?: boolean | null;
            /**
             * Contactos Menores Un Ano
             * @description Contactos menores de 1 año
             */
            contactos_menores_un_ano?: number | null;
            /**
             * Contactos Vacunados
             * @description Contactos vacunados
             */
            contactos_vacunados?: number | null;
            /**
             * Contactos Embarazadas
             * @description Contactos embarazadas
             */
            contactos_embarazadas?: number | null;
        };
        /**
         * DashboardChartsResponse
         * @description Response model para charts del dashboard
         */
        DashboardChartsResponse: {
            /**
             * Charts
             * @description Lista de charts con sus datos
             */
            charts: components["schemas"]["ChartDataItem"][];
            /**
             * Total
             * @description Total de charts aplicables
             */
            total: number;
            /**
             * Filtros Aplicados
             * @description Filtros que se aplicaron
             */
            filtros_aplicados: {
                [key: string]: unknown;
            };
        };
        /**
         * DashboardResumenResponse
         * @description Response del dashboard resumen
         */
        DashboardResumenResponse: {
            tabla_resumen: components["schemas"]["TablaResumen"];
            /** Eventos Mas Tipicos */
            eventos_mas_tipicos: components["schemas"]["app__api__v1__dashboard__get_resumen__EventoStats"][];
            /** Grupos Mas Tipicos */
            grupos_mas_tipicos: components["schemas"]["GrupoStats"][];
            /** Piramide Poblacional */
            piramide_poblacional: components["schemas"]["PiramidePoblacional"][];
            /** Territorios Afectados */
            territorios_afectados: components["schemas"]["TerritorioAfectado"][];
        };
        /**
         * DepartamentoEstadistica
         * @description Estadística de un departamento
         */
        DepartamentoEstadistica: {
            /**
             * Codigo Indec
             * @description Código INDEC del departamento
             */
            codigo_indec: number;
            /**
             * Nombre
             * @description Nombre del departamento
             */
            nombre: string;
            /**
             * Zona Ugd
             * @description Zona UGD del departamento
             */
            zona_ugd: string;
            /**
             * Poblacion
             * @description Población del departamento
             */
            poblacion: number;
            /**
             * Casos
             * @description Número de casos
             */
            casos: number;
            /**
             * Tasa Incidencia
             * @description Tasa de incidencia por 100.000 habitantes
             */
            tasa_incidencia: number;
        };
        /**
         * DomicilioInfo
         * @description Información de domicilio actual
         */
        DomicilioInfo: {
            /** Calle */
            calle?: string | null;
            /** Numero */
            numero?: string | null;
            /** Barrio */
            barrio?: string | null;
            /** Localidad */
            localidad?: string | null;
            /** Provincia */
            provincia?: string | null;
        };
        /**
         * ErrorDetail
         * @description Detalle de un error específico.
         */
        ErrorDetail: {
            /**
             * Code
             * @description Código de error machine-readable
             */
            code: string;
            /**
             * Message
             * @description Mensaje human-readable
             */
            message: string;
            /**
             * Field
             * @description Campo que causó el error
             */
            field?: string | null;
        };
        /**
         * ErrorResponse
         * @description Respuesta de error estándar.
         *
         *     Se usa SOLO con códigos HTTP 4xx/5xx.
         *     Basado en Google JSON Style Guide.
         */
        ErrorResponse: {
            /** @description Detalle del error */
            error: components["schemas"]["ErrorDetail"];
            /**
             * Errors
             * @description Lista de errores adicionales (para validación múltiple)
             */
            errors?: components["schemas"]["ErrorDetail"][] | null;
            /**
             * Request Id
             * @description ID único para tracking
             */
            request_id?: string | null;
        };
        /**
         * EstablecimientoInfo
         * @description Información de establecimiento
         */
        EstablecimientoInfo: {
            /**
             * Id
             * @description ID del establecimiento
             */
            id: number;
            /**
             * Nombre
             * @description Nombre del establecimiento
             */
            nombre?: string | null;
            /**
             * Tipo
             * @description Tipo de establecimiento
             */
            tipo?: string | null;
            /**
             * Provincia
             * @description Provincia
             */
            provincia?: string | null;
            /**
             * Localidad
             * @description Localidad
             */
            localidad?: string | null;
        };
        /**
         * EventStrategyCreate
         * @description Request DTO para crear estrategia.
         */
        EventStrategyCreate: {
            /**
             * Name
             * @description Nombre de la estrategia
             */
            name: string;
            /**
             * Tipo Eno Id
             * @description ID del tipo de evento epidemiológico
             */
            tipo_eno_id: number;
            /**
             * Active
             * @description Si la estrategia está activa
             * @default true
             */
            active: boolean;
            /**
             * Confidence Threshold
             * @description Umbral de confianza general
             * @default 0.7
             */
            confidence_threshold: number;
            /**
             * Description
             * @description Descripción completa de la estrategia
             */
            description?: string | null;
            /**
             * Config
             * @description Configuración adicional (filtros geográficos, etc.)
             */
            config?: {
                [key: string]: unknown;
            } | null;
            /**
             * Valid From
             * Format: date-time
             * @description Fecha desde cuando la estrategia es válida
             */
            valid_from?: string;
            /**
             * Valid Until
             * @description Fecha hasta cuando la estrategia es válida (None = sin fin)
             */
            valid_until?: string | null;
            /**
             * Classification Rules
             * @description Reglas de clasificación
             * @default []
             */
            classification_rules: components["schemas"]["ClassificationRuleRequest"][];
            /**
             * Metadata Extractors
             * @description Extractores de metadata
             * @default []
             */
            metadata_extractors: components["schemas"]["FilterConditionRequest"][];
        };
        /**
         * EventStrategyResponse
         * @description Response DTO para estrategias.
         */
        EventStrategyResponse: {
            /**
             * Name
             * @description Nombre de la estrategia
             */
            name: string;
            /**
             * Tipo Eno Id
             * @description ID del tipo de evento epidemiológico
             */
            tipo_eno_id: number;
            /**
             * Active
             * @description Si la estrategia está activa
             * @default true
             */
            active: boolean;
            /**
             * Confidence Threshold
             * @description Umbral de confianza general
             * @default 0.7
             */
            confidence_threshold: number;
            /**
             * Description
             * @description Descripción completa de la estrategia
             */
            description?: string | null;
            /**
             * Config
             * @description Configuración adicional (filtros geográficos, etc.)
             */
            config?: {
                [key: string]: unknown;
            } | null;
            /**
             * Valid From
             * Format: date-time
             * @description Fecha desde cuando la estrategia es válida
             */
            valid_from: string;
            /**
             * Valid Until
             * @description Fecha hasta cuando la estrategia es válida
             */
            valid_until?: string | null;
            /**
             * Id
             * @description ID de la estrategia
             */
            id: number;
            /**
             * Tipo Eno Name
             * @description Nombre del tipo de evento
             */
            tipo_eno_name?: string | null;
            /**
             * Status
             * @description Estado de la estrategia
             * @default active
             */
            status: string;
            /**
             * Classification Rules
             * @description Reglas de clasificación
             * @default []
             */
            classification_rules: components["schemas"]["ClassificationRuleResponse"][];
            /**
             * Metadata Extractors
             * @description Extractores de metadata
             * @default []
             */
            metadata_extractors: components["schemas"]["FilterConditionResponse"][];
            /**
             * Created At
             * Format: date-time
             * @description Fecha de creación
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Fecha de última actualización
             */
            updated_at: string;
            /**
             * Created By
             * @description Usuario que creó la estrategia
             */
            created_by?: string | null;
            /**
             * Classification Rules Count
             * @description Número de reglas activas
             */
            classification_rules_count?: number | null;
        };
        /**
         * EventStrategyUpdate
         * @description Request DTO para actualizar estrategia.
         */
        EventStrategyUpdate: {
            /**
             * Name
             * @description Nombre de la estrategia
             */
            name?: string | null;
            /**
             * Active
             * @description Si la estrategia está activa
             */
            active?: boolean | null;
            /**
             * Confidence Threshold
             * @description Umbral de confianza general
             */
            confidence_threshold?: number | null;
            /**
             * Description
             * @description Descripción de la estrategia
             */
            description?: string | null;
            /**
             * Config
             * @description Configuración adicional
             */
            config?: {
                [key: string]: unknown;
            } | null;
            /**
             * Valid From
             * @description Fecha desde cuando la estrategia es válida
             */
            valid_from?: string | null;
            /**
             * Valid Until
             * @description Fecha hasta cuando la estrategia es válida (None = sin fin)
             */
            valid_until?: string | null;
            /**
             * Classification Rules
             * @description Reglas de clasificación
             */
            classification_rules?: components["schemas"]["ClassificationRuleRequest"][] | null;
            /**
             * Metadata Extractors
             * @description Extractores de metadata
             */
            metadata_extractors?: components["schemas"]["FilterConditionRequest"][] | null;
        };
        /**
         * EventoCompleto
         * @description Evento completo con toda su información
         */
        EventoCompleto: {
            /** Id */
            id: number;
            /** Id Evento Caso */
            id_evento_caso: number;
            /** Tipo Eno Id */
            tipo_eno_id?: number | null;
            /** Tipo Eno Nombre */
            tipo_eno_nombre?: string | null;
            /** Grupo Eno Nombre */
            grupo_eno_nombre?: string | null;
            /** Fecha Minima Evento */
            fecha_minima_evento?: string | null;
            /** Fecha Inicio Sintomas */
            fecha_inicio_sintomas?: string | null;
            /** Fecha Apertura */
            fecha_apertura?: string | null;
            /** Clasificacion Estrategia */
            clasificacion_estrategia?: string | null;
            /** Clasificacion Manual */
            clasificacion_manual?: string | null;
            /** Clasificacion Algoritmo */
            clasificacion_algoritmo?: string | null;
            /** Semana Epidemiologica Apertura */
            semana_epidemiologica_apertura?: number | null;
            /** Anio Epidemiologico Apertura */
            anio_epidemiologico_apertura?: number | null;
            /**
             * Es Sintomatico
             * @default false
             */
            es_sintomatico: boolean;
            /**
             * Requiere Revision
             * @default false
             */
            requiere_revision: boolean;
            domicilio?: components["schemas"]["app__api__v1__personas__get_detail__DomicilioGeograficoInfo"] | null;
            /**
             * Sintomas
             * @default []
             */
            sintomas: components["schemas"]["app__api__v1__personas__get_detail__SintomaInfo"][];
            /**
             * Muestras
             * @default []
             */
            muestras: components["schemas"]["app__api__v1__personas__get_detail__MuestraInfo"][];
            /**
             * Estudios
             * @default []
             */
            estudios: components["schemas"]["app__api__v1__personas__get_detail__EstudioInfo"][];
            /**
             * Diagnosticos
             * @default []
             */
            diagnosticos: components["schemas"]["app__api__v1__personas__get_detail__DiagnosticoInfo"][];
            /**
             * Tratamientos
             * @default []
             */
            tratamientos: components["schemas"]["app__api__v1__personas__get_detail__TratamientoInfo"][];
            /**
             * Internaciones
             * @default []
             */
            internaciones: components["schemas"]["app__api__v1__personas__get_detail__InternacionInfo"][];
            /**
             * Vacunas
             * @default []
             */
            vacunas: components["schemas"]["app__api__v1__personas__get_detail__VacunaInfo"][];
        };
        /**
         * EventoDetailResponse
         * @description Respuesta detallada de un evento (EVENT-CENTERED)
         */
        EventoDetailResponse: {
            /**
             * Id
             * @description ID del evento
             */
            id: number;
            /**
             * Id Evento Caso
             * @description ID del caso
             */
            id_evento_caso: number;
            /**
             * Tipo Eno Id
             * @description ID del tipo ENO
             */
            tipo_eno_id: number;
            /**
             * Tipo Eno Nombre
             * @description Nombre del tipo ENO
             */
            tipo_eno_nombre?: string | null;
            /**
             * Tipo Eno Descripcion
             * @description Descripción del tipo ENO
             */
            tipo_eno_descripcion?: string | null;
            /**
             * Enfermedad
             * @description Enfermedad relacionada
             */
            enfermedad?: string | null;
            /**
             * Fecha Minima Evento
             * Format: date
             * @description Fecha mínima del evento
             */
            fecha_minima_evento: string;
            /**
             * Fecha Inicio Sintomas
             * @description Fecha de inicio de síntomas
             */
            fecha_inicio_sintomas?: string | null;
            /**
             * Fecha Apertura Caso
             * @description Fecha de apertura del caso
             */
            fecha_apertura_caso?: string | null;
            /**
             * Fecha Primera Consulta
             * @description Fecha de primera consulta
             */
            fecha_primera_consulta?: string | null;
            /**
             * Fecha Notificacion
             * @description Fecha de notificación
             */
            fecha_notificacion?: string | null;
            /**
             * Fecha Diagnostico
             * @description Fecha de diagnóstico
             */
            fecha_diagnostico?: string | null;
            /**
             * Fecha Investigacion
             * @description Fecha de investigación
             */
            fecha_investigacion?: string | null;
            /**
             * Semana Epidemiologica Apertura
             * @description Semana epidemiológica de apertura
             */
            semana_epidemiologica_apertura?: number | null;
            /**
             * Anio Epidemiologico Apertura
             * @description Año epidemiológico de apertura
             */
            anio_epidemiologico_apertura?: number | null;
            /**
             * Semana Epidemiologica Sintomas
             * @description Semana epidemiológica de síntomas
             */
            semana_epidemiologica_sintomas?: number | null;
            /** @description Clasificación estratégica del evento */
            clasificacion_estrategia?: components["schemas"]["TipoClasificacion"] | null;
            /**
             * Confidence Score
             * @description Score de confianza
             */
            confidence_score?: number | null;
            /**
             * Metadata Clasificacion
             * @description Metadata de clasificación
             */
            metadata_clasificacion?: {
                [key: string]: unknown;
            } | null;
            /**
             * Metadata Extraida
             * @description Metadata extraída
             */
            metadata_extraida?: {
                [key: string]: unknown;
            } | null;
            /**
             * Id Estrategia Aplicada
             * @description ID de la estrategia que se aplicó para clasificar
             */
            id_estrategia_aplicada?: number | null;
            /**
             * Estrategia Nombre
             * @description Nombre de la estrategia aplicada
             */
            estrategia_nombre?: string | null;
            /**
             * Trazabilidad Clasificacion
             * @description Trazabilidad completa: reglas evaluadas, condiciones cumplidas, razón de clasificación
             */
            trazabilidad_clasificacion?: {
                [key: string]: unknown;
            } | null;
            /**
             * Tipo Sujeto
             * @description Tipo de sujeto
             */
            tipo_sujeto: string;
            /** @description Información del ciudadano */
            ciudadano?: components["schemas"]["CiudadanoInfo"] | null;
            /** @description Información del animal */
            animal?: components["schemas"]["AnimalInfo"] | null;
            /** @description Snapshot geográfico del domicilio al momento del evento */
            domicilio_geografico?: components["schemas"]["app__api__v1__eventos__get_detail__DomicilioGeograficoInfo"] | null;
            /** @description Establecimiento de consulta */
            establecimiento_consulta?: components["schemas"]["EstablecimientoInfo"] | null;
            /** @description Establecimiento que notificó */
            establecimiento_notificacion?: components["schemas"]["EstablecimientoInfo"] | null;
            /** @description Establecimiento de carga */
            establecimiento_carga?: components["schemas"]["EstablecimientoInfo"] | null;
            /**
             * Es Caso Sintomatico
             * @description Si es sintomático
             */
            es_caso_sintomatico?: boolean | null;
            /**
             * Requiere Revision Especie
             * @description Si requiere revisión
             */
            requiere_revision_especie?: boolean | null;
            /**
             * Observaciones Texto
             * @description Observaciones
             */
            observaciones_texto?: string | null;
            /**
             * Id Origen
             * @description ID del sistema origen
             */
            id_origen?: string | null;
            /**
             * Datos Originales Csv
             * @description Datos originales del CSV
             */
            datos_originales_csv?: {
                [key: string]: unknown;
            } | null;
            /**
             * Sintomas
             * @description Síntomas del evento
             */
            sintomas?: components["schemas"]["app__api__v1__eventos__get_detail__SintomaInfo"][];
            /**
             * Muestras
             * @description Muestras del evento
             */
            muestras?: components["schemas"]["app__api__v1__eventos__get_detail__MuestraInfo"][];
            /**
             * Diagnosticos
             * @description Diagnósticos del evento
             */
            diagnosticos?: components["schemas"]["app__api__v1__eventos__get_detail__DiagnosticoInfo"][];
            /**
             * Tratamientos
             * @description Tratamientos del evento
             */
            tratamientos?: components["schemas"]["app__api__v1__eventos__get_detail__TratamientoInfo"][];
            /**
             * Internaciones
             * @description Internaciones del evento
             */
            internaciones?: components["schemas"]["app__api__v1__eventos__get_detail__InternacionInfo"][];
            /**
             * Investigaciones
             * @description Investigaciones del evento
             */
            investigaciones?: components["schemas"]["InvestigacionInfo"][];
            /**
             * Contactos
             * @description Contactos del evento
             */
            contactos?: components["schemas"]["ContactoInfo"][];
            /**
             * Ambitos Concurrencia
             * @description Ámbitos de concurrencia
             */
            ambitos_concurrencia?: components["schemas"]["AmbitoConcurrenciaInfo"][];
            /**
             * Antecedentes
             * @description Antecedentes epidemiológicos
             */
            antecedentes?: components["schemas"]["AntecedenteInfo"][];
            /**
             * Vacunas
             * @description Vacunas relacionadas
             */
            vacunas?: components["schemas"]["app__api__v1__eventos__get_detail__VacunaInfo"][];
            /**
             * Created At
             * @description Fecha de creación
             */
            created_at?: unknown | null;
            /**
             * Updated At
             * @description Fecha de actualización
             */
            updated_at?: unknown | null;
            /**
             * Total Sintomas
             * @description Total de síntomas
             * @default 0
             */
            total_sintomas: number;
            /**
             * Total Muestras
             * @description Total de muestras
             * @default 0
             */
            total_muestras: number;
            /**
             * Total Diagnosticos
             * @description Total de diagnósticos
             * @default 0
             */
            total_diagnosticos: number;
            /**
             * Total Tratamientos
             * @description Total de tratamientos
             * @default 0
             */
            total_tratamientos: number;
            /**
             * Total Internaciones
             * @description Total de internaciones
             * @default 0
             */
            total_internaciones: number;
            /**
             * Total Investigaciones
             * @description Total de investigaciones
             * @default 0
             */
            total_investigaciones: number;
        };
        /**
         * EventoListItem
         * @description Item individual en la lista de eventos
         */
        EventoListItem: {
            /**
             * Id
             * @description ID del evento
             */
            id: number;
            /**
             * Id Evento Caso
             * @description ID único del caso
             */
            id_evento_caso: number;
            /**
             * Tipo Eno Id
             * @description ID del tipo ENO
             */
            tipo_eno_id: number;
            /**
             * Tipo Eno Nombre
             * @description Nombre del tipo ENO
             */
            tipo_eno_nombre?: string | null;
            /**
             * Fecha Minima Evento
             * @description Fecha del evento
             */
            fecha_minima_evento?: string | null;
            /**
             * Fecha Inicio Sintomas
             * @description Fecha de inicio de síntomas
             */
            fecha_inicio_sintomas?: string | null;
            /** @description Clasificación estratégica del evento */
            clasificacion_estrategia?: components["schemas"]["TipoClasificacion"] | null;
            /**
             * Confidence Score
             * @description Score de confianza
             */
            confidence_score?: number | null;
            /**
             * Semana Epidemiologica Apertura
             * @description Semana epidemiológica de apertura del caso
             */
            semana_epidemiologica_apertura?: number | null;
            /**
             * Anio Epidemiologico Apertura
             * @description Año epidemiológico de apertura del caso
             */
            anio_epidemiologico_apertura?: number | null;
            /**
             * Tipo Sujeto
             * @description Tipo de sujeto: humano/animal/desconocido
             */
            tipo_sujeto: string;
            /**
             * Nombre Sujeto
             * @description Nombre del sujeto
             */
            nombre_sujeto?: string | null;
            /**
             * Documento Sujeto
             * @description Documento del sujeto
             */
            documento_sujeto?: string | null;
            /**
             * Edad
             * @description Edad en años
             */
            edad?: number | null;
            /**
             * Sexo
             * @description Sexo del sujeto
             */
            sexo?: string | null;
            /**
             * Provincia
             * @description Provincia de residencia
             */
            provincia?: string | null;
            /**
             * Localidad
             * @description Localidad de residencia
             */
            localidad?: string | null;
            /**
             * Es Caso Sintomatico
             * @description Si presenta síntomas
             */
            es_caso_sintomatico?: boolean | null;
            /**
             * Requiere Revision Especie
             * @description Si requiere revisión
             */
            requiere_revision_especie?: boolean | null;
            /**
             * Con Resultado Mortal
             * @description Si tuvo resultado mortal
             */
            con_resultado_mortal?: boolean | null;
            /**
             * Cantidad Sintomas
             * @description Cantidad de síntomas registrados
             * @default 0
             */
            cantidad_sintomas: number;
            /**
             * Cantidad Muestras
             * @description Cantidad de muestras tomadas
             * @default 0
             */
            cantidad_muestras: number;
            /**
             * Cantidad Diagnosticos
             * @description Cantidad de diagnósticos
             * @default 0
             */
            cantidad_diagnosticos: number;
        };
        /**
         * EventoListResponse
         * @description Respuesta completa del listado de eventos
         */
        EventoListResponse: {
            /**
             * Data
             * @description Lista de eventos
             */
            data: components["schemas"]["EventoListItem"][];
            pagination: components["schemas"]["PaginationInfo"];
            /** @description Estadísticas agregadas */
            stats: components["schemas"]["app__api__v1__eventos__list__EventoStats"];
            /**
             * Filters Applied
             * @description Filtros aplicados
             */
            filters_applied: {
                [key: string]: unknown;
            };
        };
        /**
         * EventoMapaItem
         * @description Representa un punto o área en el mapa con eventos agregados
         */
        EventoMapaItem: {
            /**
             * Id
             * @description ID único del punto (provincia_id, departamento_id o localidad_id)
             */
            id: string;
            /**
             * Nombre
             * @description Nombre de la ubicación
             */
            nombre: string;
            /**
             * Nivel
             * @description Nivel geográfico
             * @enum {string}
             */
            nivel: "provincia" | "departamento" | "localidad";
            /**
             * Total Eventos
             * @description Total de eventos en esta ubicación
             */
            total_eventos: number;
            /**
             * Latitud
             * @description Latitud del centroide o primera ubicación
             */
            latitud?: number | null;
            /**
             * Longitud
             * @description Longitud del centroide o primera ubicación
             */
            longitud?: number | null;
            /**
             * Id Provincia Indec
             * @description ID INDEC de provincia
             */
            id_provincia_indec?: number | null;
            /**
             * Id Departamento Indec
             * @description ID INDEC de departamento
             */
            id_departamento_indec?: number | null;
            /**
             * Id Localidad Indec
             * @description ID INDEC de localidad
             */
            id_localidad_indec?: number | null;
            /**
             * Provincia Nombre
             * @description Nombre de provincia (para departamentos y localidades)
             */
            provincia_nombre?: string | null;
            /**
             * Departamento Nombre
             * @description Nombre de departamento (para localidades)
             */
            departamento_nombre?: string | null;
        };
        /**
         * EventoMapaResponse
         * @description Respuesta del endpoint de mapa con eventos agrupados
         */
        EventoMapaResponse: {
            /** Items */
            items?: components["schemas"]["EventoMapaItem"][];
            /**
             * Total
             * @description Total de puntos en el mapa
             */
            total: number;
            /**
             * Nivel
             * @description Nivel de agregación aplicado
             * @enum {string}
             */
            nivel: "provincia" | "departamento" | "localidad";
        };
        /**
         * EventoSortBy
         * @enum {string}
         */
        EventoSortBy: "fecha_desc" | "fecha_asc" | "id_desc" | "id_asc" | "tipo_eno";
        /**
         * EventoTimelineItem
         * @description Item del timeline de un evento
         */
        EventoTimelineItem: {
            /**
             * Fecha
             * Format: date
             * @description Fecha del evento
             */
            fecha: string;
            /**
             * Tipo
             * @description Tipo de evento
             */
            tipo: string;
            /**
             * Descripcion
             * @description Descripción del evento
             */
            descripcion: string;
            /**
             * Detalles
             * @description Detalles adicionales
             */
            detalles?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * EventoTimelineResponse
         * @description Respuesta del timeline de un evento
         */
        EventoTimelineResponse: {
            /**
             * Items
             * @description Items del timeline
             */
            items: components["schemas"]["EventoTimelineItem"][];
            /**
             * Total
             * @description Total de items
             */
            total: number;
        };
        /**
         * FilterCombination
         * @description Modelo para una combinación de filtros
         */
        FilterCombination: {
            /** Id */
            id: string;
            /** Group Id */
            group_id?: number | null;
            /** Group Name */
            group_name?: string | null;
            /**
             * Event Ids
             * @default []
             */
            event_ids: number[];
            /**
             * Event Names
             * @default []
             */
            event_names: string[];
            /** Clasificaciones */
            clasificaciones?: string[] | null;
        };
        /**
         * FilterConditionRequest
         * @description Request DTO para condiciones de filtro.
         */
        FilterConditionRequest: {
            /** @description Tipo de filtro */
            filter_type: components["schemas"]["TipoFiltro"];
            /**
             * Field Name
             * @description Nombre del campo a filtrar
             */
            field_name: string;
            /**
             * Value
             * @description Valor para filtros de valor único
             */
            value?: string | null;
            /**
             * Values
             * @description Lista de valores para filtros múltiples
             */
            values?: string[] | null;
            /**
             * Logical Operator
             * @description Operador lógico (AND/OR)
             * @default AND
             */
            logical_operator: string;
            /**
             * Order
             * @description Orden de aplicación del filtro
             * @default 0
             */
            order: number;
            /**
             * Config
             * @description Configuración adicional específica del filtro
             */
            config?: {
                [key: string]: unknown;
            } | null;
            /**
             * Extracted Metadata Field
             * @description Campo donde guardar metadata extraída
             */
            extracted_metadata_field?: string | null;
        };
        /**
         * FilterConditionResponse
         * @description Response DTO para condiciones de filtro.
         */
        FilterConditionResponse: {
            /** @description Tipo de filtro */
            filter_type: components["schemas"]["TipoFiltro"];
            /**
             * Field Name
             * @description Nombre del campo a filtrar
             */
            field_name: string;
            /**
             * Value
             * @description Valor para filtros de valor único
             */
            value?: string | null;
            /**
             * Values
             * @description Lista de valores para filtros múltiples
             */
            values?: string[] | null;
            /**
             * Logical Operator
             * @description Operador lógico (AND/OR)
             * @default AND
             */
            logical_operator: string;
            /**
             * Order
             * @description Orden de aplicación del filtro
             * @default 0
             */
            order: number;
            /**
             * Config
             * @description Configuración adicional específica del filtro
             */
            config?: {
                [key: string]: unknown;
            } | null;
            /**
             * Extracted Metadata Field
             * @description Campo donde guardar metadata extraída
             */
            extracted_metadata_field?: string | null;
            /**
             * Id
             * @description ID del filtro
             */
            id?: number | null;
            /**
             * Created At
             * @description Fecha de creación
             */
            created_at?: string | null;
            /**
             * Updated At
             * @description Fecha de última actualización
             */
            updated_at?: string | null;
        };
        /** GrupoEnoInfo */
        GrupoEnoInfo: {
            /**
             * Id
             * @description ID del grupo ENO
             */
            id: number;
            /**
             * Nombre
             * @description Nombre del grupo ENO
             */
            nombre: string;
            /**
             * Descripcion
             * @description Descripción del grupo
             */
            descripcion?: string | null;
            /**
             * Codigo
             * @description Código del grupo
             */
            codigo?: string | null;
        };
        /**
         * GrupoStats
         * @description Estadísticas de grupos más típicos
         */
        GrupoStats: {
            /** Grupo Eno */
            grupo_eno: string;
            /** Codigo Grupo */
            codigo_grupo: string | null;
            /** Total */
            total: number;
            /** Tipos */
            tipos: {
                [key: string]: unknown;
            }[];
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * IndicadoresResponse
         * @description Response model para indicadores del dashboard
         */
        IndicadoresResponse: {
            /**
             * Total Casos
             * @description Total de casos registrados
             */
            total_casos: number;
            /**
             * Tasa Incidencia
             * @description Tasa de incidencia por 100.000 habitantes
             */
            tasa_incidencia: number;
            /**
             * Areas Afectadas
             * @description Número de departamentos afectados
             */
            areas_afectadas: number;
            /**
             * Letalidad
             * @description Tasa de letalidad en porcentaje
             */
            letalidad: number;
            /**
             * Filtros Aplicados
             * @description Filtros que se aplicaron a la consulta
             */
            filtros_aplicados: {
                [key: string]: unknown;
            };
        };
        /**
         * InvestigacionInfo
         * @description Información de investigación epidemiológica
         */
        InvestigacionInfo: {
            /**
             * Id
             * @description ID de la investigación
             */
            id: number;
            /**
             * Es Usuario Centinela
             * @description Si es usuario centinela
             */
            es_usuario_centinela?: boolean | null;
            /**
             * Es Evento Centinela
             * @description Si es evento centinela
             */
            es_evento_centinela?: boolean | null;
            /**
             * Participo Usuario Centinela
             * @description Si participó usuario centinela
             */
            participo_usuario_centinela?: boolean | null;
            /**
             * Id Usuario Centinela Participante
             * @description ID del usuario centinela que participó
             */
            id_usuario_centinela_participante?: number | null;
            /**
             * Id Usuario Registro
             * @description ID del usuario que registró
             */
            id_usuario_registro?: number | null;
            /**
             * Id Snvs Evento
             * @description ID SNVS del evento
             */
            id_snvs_evento?: number | null;
            /**
             * Es Investigacion Terreno
             * @description Si fue investigación de terreno
             */
            es_investigacion_terreno?: boolean | null;
            /**
             * Fecha Investigacion
             * @description Fecha de investigación
             */
            fecha_investigacion?: string | null;
            /**
             * Tipo Lugar Investigacion
             * @description Tipo y lugar de investigación
             */
            tipo_lugar_investigacion?: string | null;
            /**
             * Origen Financiamiento
             * @description Origen del financiamiento
             */
            origen_financiamiento?: string | null;
        };
        /**
         * JobStatus
         * @description Estados posibles de un trabajo de procesamiento.
         * @enum {string}
         */
        JobStatus: "pending" | "in_progress" | "completed" | "failed" | "cancelled";
        /**
         * JobStatusResponse
         * @description Respuesta del estado de un job asíncrono.
         */
        JobStatusResponse: {
            /**
             * Job Id
             * @description UUID del job
             */
            job_id: string;
            /** @description Estado actual del job */
            status: components["schemas"]["JobStatus"];
            /**
             * Progress Percentage
             * @description Progreso (0-100)
             */
            progress_percentage: number;
            /**
             * Current Step
             * @description Paso actual
             */
            current_step?: string | null;
            /**
             * Total Steps
             * @description Total de pasos
             */
            total_steps: number;
            /**
             * Completed Steps
             * @description Pasos completados
             */
            completed_steps: number;
            /**
             * Created At
             * Format: date-time
             * @description Momento de creación
             */
            created_at: string;
            /**
             * Started At
             * @description Momento de inicio
             */
            started_at?: string | null;
            /**
             * Completed At
             * @description Momento de finalización
             */
            completed_at?: string | null;
            /**
             * Duration Seconds
             * @description Duración en segundos
             */
            duration_seconds?: number | null;
            /**
             * Error Message
             * @description Mensaje de error si falló
             */
            error_message?: string | null;
            /**
             * Result Data
             * @description Datos del resultado
             */
            result_data?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * MapaGeograficoResponse
         * @description Response model para mapa geográfico
         */
        MapaGeograficoResponse: {
            /**
             * Departamentos
             * @description Lista de departamentos con estadísticas
             */
            departamentos: components["schemas"]["DepartamentoEstadistica"][];
            /**
             * Total Casos
             * @description Total de casos en toda la provincia
             */
            total_casos: number;
            /**
             * Filtros Aplicados
             * @description Filtros que se aplicaron
             */
            filtros_aplicados: {
                [key: string]: unknown;
            };
        };
        /** PaginatedResponse[GrupoEnoInfo] */
        PaginatedResponse_GrupoEnoInfo_: {
            /**
             * Data
             * @description Lista de elementos
             */
            data: components["schemas"]["GrupoEnoInfo"][];
            /**
             * Meta
             * @description Información de paginación
             * @example {
             *       "page": 1,
             *       "per_page": 20,
             *       "total": 100,
             *       "total_pages": 5
             *     }
             */
            meta: {
                [key: string]: unknown;
            };
            /**
             * Links
             * @description Enlaces de navegación
             * @example {
             *       "first": "/api/items?page=1",
             *       "last": "/api/items?page=5",
             *       "next": "/api/items?page=2"
             *     }
             */
            links?: {
                [key: string]: string | null;
            } | null;
        };
        /** PaginatedResponse[TipoEnoInfo] */
        PaginatedResponse_TipoEnoInfo_: {
            /**
             * Data
             * @description Lista de elementos
             */
            data: components["schemas"]["TipoEnoInfo"][];
            /**
             * Meta
             * @description Información de paginación
             * @example {
             *       "page": 1,
             *       "per_page": 20,
             *       "total": 100,
             *       "total_pages": 5
             *     }
             */
            meta: {
                [key: string]: unknown;
            };
            /**
             * Links
             * @description Enlaces de navegación
             * @example {
             *       "first": "/api/items?page=1",
             *       "last": "/api/items?page=5",
             *       "next": "/api/items?page=2"
             *     }
             */
            links?: {
                [key: string]: string | null;
            } | null;
        };
        /**
         * PaginationInfo
         * @description Información de paginación
         */
        PaginationInfo: {
            /**
             * Page
             * @description Página actual
             */
            page: number;
            /**
             * Page Size
             * @description Tamaño de página
             */
            page_size: number;
            /**
             * Total
             * @description Total de registros
             */
            total: number;
            /**
             * Total Pages
             * @description Total de páginas
             */
            total_pages: number;
            /**
             * Has Next
             * @description Si hay página siguiente
             */
            has_next: boolean;
            /**
             * Has Prev
             * @description Si hay página anterior
             */
            has_prev: boolean;
        };
        /**
         * PersonaDetailResponse
         * @description Respuesta detallada de una persona (PERSON-CENTERED)
         */
        PersonaDetailResponse: {
            /**
             * Tipo Sujeto
             * @description Tipo: humano/animal
             */
            tipo_sujeto: string;
            /**
             * Persona Id
             * @description ID de la persona
             */
            persona_id: number;
            /** Nombre */
            nombre?: string | null;
            /** Apellido */
            apellido?: string | null;
            /**
             * Nombre Completo
             * @description Nombre completo
             */
            nombre_completo: string;
            /** Documento Tipo */
            documento_tipo?: string | null;
            /** Documento Numero */
            documento_numero?: string | null;
            /** Fecha Nacimiento */
            fecha_nacimiento?: string | null;
            /** Edad Actual */
            edad_actual?: number | null;
            /** Sexo Biologico */
            sexo_biologico?: string | null;
            /** Genero Autopercibido */
            genero_autopercibido?: string | null;
            /** Especie */
            especie?: string | null;
            /** Raza */
            raza?: string | null;
            /** Identificacion Animal */
            identificacion_animal?: string | null;
            domicilio?: components["schemas"]["DomicilioInfo"] | null;
            /** Provincia */
            provincia?: string | null;
            /** Localidad */
            localidad?: string | null;
            /** Telefono */
            telefono?: string | null;
            /** Obra Social */
            obra_social?: string | null;
            /**
             * Total Eventos
             * @description Total de eventos
             */
            total_eventos: number;
            /**
             * Eventos
             * @description Lista completa de eventos
             */
            eventos?: components["schemas"]["EventoCompleto"][];
            /**
             * Tipos Eventos Unicos
             * @description Cantidad de tipos de eventos diferentes
             * @default 0
             */
            tipos_eventos_unicos: number;
            /**
             * Eventos Confirmados
             * @default 0
             */
            eventos_confirmados: number;
            /**
             * Eventos Sospechosos
             * @default 0
             */
            eventos_sospechosos: number;
            /**
             * Eventos Probables
             * @default 0
             */
            eventos_probables: number;
            /**
             * Eventos Descartados
             * @default 0
             */
            eventos_descartados: number;
            /** Primer Evento Fecha */
            primer_evento_fecha?: string | null;
            /** Ultimo Evento Fecha */
            ultimo_evento_fecha?: string | null;
        };
        /**
         * PersonaListItem
         * @description Item individual en la lista de personas (PERSON-CENTERED)
         */
        PersonaListItem: {
            /**
             * Tipo Sujeto
             * @description Tipo: humano/animal
             */
            tipo_sujeto: string;
            /**
             * Persona Id
             * @description ID de la persona (codigo_ciudadano o id_animal)
             */
            persona_id: number;
            /**
             * Nombre Completo
             * @description Nombre completo o identificación
             */
            nombre_completo: string;
            /**
             * Documento
             * @description Documento (solo humanos)
             */
            documento?: string | null;
            /**
             * Edad Actual
             * @description Edad actual en años
             */
            edad_actual?: number | null;
            /**
             * Sexo
             * @description Sexo/género
             */
            sexo?: string | null;
            /**
             * Provincia
             * @description Provincia de residencia
             */
            provincia?: string | null;
            /**
             * Localidad
             * @description Localidad de residencia
             */
            localidad?: string | null;
            /**
             * Total Eventos
             * @description Total de eventos registrados
             */
            total_eventos: number;
            /**
             * Eventos Confirmados
             * @description Eventos confirmados
             * @default 0
             */
            eventos_confirmados: number;
            /**
             * Eventos Sospechosos
             * @description Eventos sospechosos
             * @default 0
             */
            eventos_sospechosos: number;
            /**
             * Eventos Probables
             * @description Eventos probables
             * @default 0
             */
            eventos_probables: number;
            /**
             * Eventos Descartados
             * @description Eventos descartados
             * @default 0
             */
            eventos_descartados: number;
            /**
             * Primer Evento Fecha
             * @description Fecha del primer evento
             */
            primer_evento_fecha?: string | null;
            /**
             * Ultimo Evento Fecha
             * @description Fecha del último evento
             */
            ultimo_evento_fecha?: string | null;
            /**
             * Ultimo Evento Tipo
             * @description Tipo del último ENO
             */
            ultimo_evento_tipo?: string | null;
            /**
             * Ultimo Evento Clasificacion
             * @description Clasificación del último evento
             */
            ultimo_evento_clasificacion?: string | null;
            /**
             * Tiene Eventos Activos
             * @description Si tiene eventos activos (últimos 30 días)
             * @default false
             */
            tiene_eventos_activos: boolean;
        };
        /**
         * PersonaListResponse
         * @description Respuesta completa del listado de personas (PERSON-CENTERED)
         */
        PersonaListResponse: {
            /**
             * Data
             * @description Lista de personas
             */
            data: components["schemas"]["PersonaListItem"][];
            pagination: components["schemas"]["PaginationInfo"];
            /**
             * Filters Applied
             * @description Filtros aplicados
             */
            filters_applied: {
                [key: string]: unknown;
            };
        };
        /**
         * PersonaSortBy
         * @enum {string}
         */
        PersonaSortBy: "nombre_asc" | "nombre_desc" | "eventos_desc" | "eventos_asc" | "ultimo_evento_desc" | "ultimo_evento_asc";
        /**
         * PersonaTimelineResponse
         * @description Respuesta del timeline completo de una persona (PERSON-CENTERED)
         */
        PersonaTimelineResponse: {
            /**
             * Persona Id
             * @description ID de la persona
             */
            persona_id: number;
            /**
             * Tipo Sujeto
             * @description Tipo: humano/animal
             */
            tipo_sujeto: string;
            /**
             * Nombre Completo
             * @description Nombre de la persona
             */
            nombre_completo: string;
            /**
             * Items
             * @description Items del timeline ordenados por fecha
             */
            items?: components["schemas"]["TimelineItem"][];
            /**
             * Fecha Inicio
             * @description Fecha del primer item
             */
            fecha_inicio?: string | null;
            /**
             * Fecha Fin
             * @description Fecha del último item
             */
            fecha_fin?: string | null;
            /**
             * Total Items
             * @description Total de items en el timeline
             */
            total_items: number;
            /**
             * Total Eventos
             * @description Total de eventos
             */
            total_eventos: number;
        };
        /**
         * PiramidePoblacional
         * @description Datos para pirámide poblacional
         */
        PiramidePoblacional: {
            /** Age */
            age: string;
            /** Sex */
            sex: string;
            /** Value */
            value: number;
        };
        /**
         * RefreshToken
         * @description Refresh token request
         */
        RefreshToken: {
            /** Refresh Token */
            refresh_token: string;
        };
        /**
         * ReportFiltersRequest
         * @description Request para generar URL firmada
         */
        ReportFiltersRequest: {
            /**
             * Filters
             * @description Lista de combinaciones de filtros
             */
            filters: {
                [key: string]: unknown;
            }[];
            /**
             * Date From
             * @description Fecha desde
             */
            date_from?: string | null;
            /**
             * Date To
             * @description Fecha hasta
             */
            date_to?: string | null;
            /**
             * Expires In
             * @description Tiempo de expiración en segundos
             * @default 3600
             */
            expires_in: number;
        };
        /**
         * ReportRequest
         * @description Request para generar un reporte
         */
        ReportRequest: {
            /** Date Range */
            date_range: {
                [key: string]: string;
            };
            /** Combinations */
            combinations: components["schemas"]["FilterCombination"][];
            /**
             * Format
             * @default pdf
             */
            format: string;
        };
        /**
         * SessionInfo
         * @description Session information response
         */
        SessionInfo: {
            /** Id */
            id: number;
            /** Ip Address */
            ip_address: string | null;
            /** User Agent */
            user_agent: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Last Activity
             * Format: date-time
             */
            last_activity: string;
            /**
             * Is Current
             * @default false
             */
            is_current: boolean;
        };
        /**
         * SignedUrlResponse
         * @description Response con la URL firmada
         */
        SignedUrlResponse: {
            /**
             * Signed Url
             * @description URL firmada para acceder al reporte
             */
            signed_url: string;
            /**
             * Expires At
             * @description Timestamp de expiración
             */
            expires_at: number;
        };
        /**
         * StrategyTestRequest
         * @description Request DTO para probar estrategia.
         */
        StrategyTestRequest: {
            /**
             * Csv Data
             * @description Datos CSV para probar
             */
            csv_data: string;
            /**
             * Sample Size
             * @description Tamaño de muestra a procesar
             */
            sample_size?: number | null;
        };
        /**
         * StrategyTestResponse
         * @description Response DTO para resultados de prueba.
         */
        StrategyTestResponse: {
            /**
             * Total Rows
             * @description Total de filas procesadas
             */
            total_rows: number;
            /**
             * Classified Rows
             * @description Filas que fueron clasificadas
             */
            classified_rows: number;
            /**
             * Classification Summary
             * @description Resumen de clasificaciones
             */
            classification_summary: {
                [key: string]: number;
            };
            /**
             * Results Preview
             * @description Muestra de resultados
             */
            results_preview: {
                [key: string]: unknown;
            }[];
            /**
             * Confidence Stats
             * @description Estadísticas de confianza
             */
            confidence_stats?: {
                [key: string]: number;
            } | null;
            /**
             * Processing Time Seconds
             * @description Tiempo de procesamiento
             */
            processing_time_seconds?: number | null;
        };
        /** SuccessResponse[AsyncJobResponse] */
        SuccessResponse_AsyncJobResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["AsyncJobResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[ChartsDisponiblesResponse] */
        SuccessResponse_ChartsDisponiblesResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["ChartsDisponiblesResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[DashboardChartsResponse] */
        SuccessResponse_DashboardChartsResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["DashboardChartsResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[DashboardResumenResponse] */
        SuccessResponse_DashboardResumenResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["DashboardResumenResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[EventStrategyResponse] */
        SuccessResponse_EventStrategyResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["EventStrategyResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[EventoDetailResponse] */
        SuccessResponse_EventoDetailResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["EventoDetailResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[EventoListResponse] */
        SuccessResponse_EventoListResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["EventoListResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[EventoMapaResponse] */
        SuccessResponse_EventoMapaResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["EventoMapaResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[EventoTimelineResponse] */
        SuccessResponse_EventoTimelineResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["EventoTimelineResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[IndicadoresResponse] */
        SuccessResponse_IndicadoresResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["IndicadoresResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[JobStatusResponse] */
        SuccessResponse_JobStatusResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["JobStatusResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[List[AuditLogResponse]] */
        SuccessResponse_List_AuditLogResponse__: {
            /**
             * Data
             * @description Datos de la respuesta
             */
            data: components["schemas"]["AuditLogResponse"][];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[List[EventStrategyResponse]] */
        SuccessResponse_List_EventStrategyResponse__: {
            /**
             * Data
             * @description Datos de la respuesta
             */
            data: components["schemas"]["EventStrategyResponse"][];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[MapaGeograficoResponse] */
        SuccessResponse_MapaGeograficoResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["MapaGeograficoResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[PersonaDetailResponse] */
        SuccessResponse_PersonaDetailResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["PersonaDetailResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[PersonaListResponse] */
        SuccessResponse_PersonaListResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["PersonaListResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[PersonaTimelineResponse] */
        SuccessResponse_PersonaTimelineResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["PersonaTimelineResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[SignedUrlResponse] */
        SuccessResponse_SignedUrlResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["SignedUrlResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[StrategyTestResponse] */
        SuccessResponse_StrategyTestResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["StrategyTestResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /** SuccessResponse[VerifySignedUrlResponse] */
        SuccessResponse_VerifySignedUrlResponse_: {
            /** @description Datos de la respuesta */
            data: components["schemas"]["VerifySignedUrlResponse"];
            /**
             * Meta
             * @description Metadata opcional (paginación, etc)
             */
            meta?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * TablaResumen
         * @description Tabla resumen con datos clave
         */
        TablaResumen: {
            /** Total Eventos */
            total_eventos: number;
            /** Total Confirmados */
            total_confirmados: number;
            /** Total Sospechosos */
            total_sospechosos: number;
            /** Total Negativos */
            total_negativos: number;
            /** Total Personas Afectadas */
            total_personas_afectadas: number;
            /** Fecha Primer Evento */
            fecha_primer_evento: string | null;
            /** Fecha Ultimo Evento */
            fecha_ultimo_evento: string | null;
        };
        /**
         * TerritorioAfectado
         * @description Provincia/Departamento/Localidad afectada
         */
        TerritorioAfectado: {
            /** Nivel */
            nivel: string;
            /** Nombre */
            nombre: string;
            /** Codigo Indec */
            codigo_indec: number | null;
            /** Total Eventos */
            total_eventos: number;
            /** Hijos */
            hijos?: {
                [key: string]: unknown;
            }[] | null;
        };
        /**
         * TimelineItem
         * @description Item individual en el timeline de la persona
         */
        TimelineItem: {
            /**
             * Tipo
             * @description Tipo de item: evento, sintoma, muestra, diagnostico, vacuna, internacion, tratamiento
             */
            tipo: string;
            /**
             * Fecha
             * Format: date
             * @description Fecha del item
             */
            fecha: string;
            /**
             * Titulo
             * @description Título descriptivo
             */
            titulo: string;
            /**
             * Descripcion
             * @description Descripción adicional
             */
            descripcion?: string | null;
            /**
             * Detalles
             * @description Detalles adicionales en formato JSON
             */
            detalles?: {
                [key: string]: unknown;
            } | null;
            /**
             * Evento Id
             * @description ID del evento al que pertenece (si aplica)
             */
            evento_id?: number | null;
            /**
             * Evento Tipo
             * @description Tipo de ENO del evento
             */
            evento_tipo?: string | null;
            /**
             * Clasificacion
             * @description Clasificación si es evento
             */
            clasificacion?: string | null;
            /**
             * Es Critico
             * @description Si es un item crítico (muerte, UCI, confirmado)
             * @default false
             */
            es_critico: boolean;
            /**
             * Icono
             * @description Icono sugerido para el frontend
             * @default info
             */
            icono: string;
            /**
             * Color
             * @description Color sugerido para el frontend
             * @default blue
             */
            color: string;
        };
        /**
         * TipoClasificacion
         * @description Clasificaciones estándar de eventos epidemiológicos
         * @enum {string}
         */
        TipoClasificacion: "CONFIRMADOS" | "SOSPECHOSOS" | "PROBABLES" | "EN_ESTUDIO" | "NEGATIVOS" | "DESCARTADOS" | "NOTIFICADOS" | "CON_RESULTADO_MORTAL" | "SIN_RESULTADO_MORTAL" | "REQUIERE_REVISION";
        /** TipoEnoInfo */
        TipoEnoInfo: {
            /**
             * Id
             * @description ID del tipo ENO
             */
            id: number;
            /**
             * Nombre
             * @description Nombre del tipo ENO
             */
            nombre: string;
            /**
             * Descripcion
             * @description Descripción del tipo
             */
            descripcion?: string | null;
            /**
             * Codigo
             * @description Código del tipo
             */
            codigo?: string | null;
            /**
             * Id Grupo Eno
             * @description ID del grupo ENO
             */
            id_grupo_eno: number;
            /**
             * Grupo Nombre
             * @description Nombre del grupo ENO
             */
            grupo_nombre?: string | null;
        };
        /**
         * TipoFiltro
         * @description Tipos de filtros soportados para clasificación
         * @enum {string}
         */
        TipoFiltro: "CAMPO_IGUAL" | "CAMPO_EN_LISTA" | "CAMPO_CONTIENE" | "REGEX_EXTRACCION" | "CAMPO_EXISTE" | "CAMPO_NO_NULO" | "CUSTOM_FUNCTION" | "DETECTOR_TIPO_SUJETO" | "EXTRACTOR_METADATA";
        /**
         * Token
         * @description JWT Token response with user info
         */
        Token: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            /** Expires In */
            expires_in: number;
            /** Refresh Token */
            refresh_token?: string | null;
            user?: components["schemas"]["TokenUser"] | null;
        };
        /**
         * TokenUser
         * @description User info in token response
         */
        TokenUser: {
            /** Id */
            id: number;
            /** Email */
            email: string;
            /** Nombre */
            nombre: string;
            /** Apellido */
            apellido: string;
            role: components["schemas"]["UserRole"];
        };
        /**
         * UserChangePassword
         * @description Schema for changing password
         */
        UserChangePassword: {
            /** Current Password */
            current_password: string;
            /** New Password */
            new_password: string;
        };
        /**
         * UserCreate
         * @description Schema for creating a new user
         */
        UserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Nombre */
            nombre: string;
            /** Apellido */
            apellido: string;
            /** Password */
            password: string;
            /** @default epidemiologo */
            role: components["schemas"]["UserRole"];
        };
        /**
         * UserLogin
         * @description Schema for user login
         */
        UserLogin: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /**
             * Remember Me
             * @default false
             */
            remember_me: boolean;
        };
        /**
         * UserResponse
         * @description Schema for user response (public info)
         */
        UserResponse: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Nombre */
            nombre: string;
            /** Apellido */
            apellido: string;
            /** Id */
            id: number;
            role: components["schemas"]["UserRole"];
            status: components["schemas"]["UserStatus"];
            /** Is Email Verified */
            is_email_verified: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login */
            last_login?: string | null;
        };
        /**
         * UserRole
         * @description User roles for authorization
         * @enum {string}
         */
        UserRole: "superadmin" | "epidemiologo";
        /**
         * UserStatus
         * @description User account status
         * @enum {string}
         */
        UserStatus: "active" | "inactive" | "suspended";
        /**
         * UserUpdate
         * @description Schema for updating user information
         */
        UserUpdate: {
            /** Email */
            email?: string | null;
            /** Nombre */
            nombre?: string | null;
            /** Apellido */
            apellido?: string | null;
            role?: components["schemas"]["UserRole"] | null;
            status?: components["schemas"]["UserStatus"] | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VerifySignedUrlRequest
         * @description Request para verificar URL firmada
         */
        VerifySignedUrlRequest: {
            /**
             * Data
             * @description Payload codificado en base64
             */
            data: string;
            /**
             * Signature
             * @description Firma HMAC
             */
            signature: string;
        };
        /**
         * VerifySignedUrlResponse
         * @description Response con los datos verificados
         */
        VerifySignedUrlResponse: {
            /**
             * Filters
             * @description Lista de filtros verificados
             */
            filters: {
                [key: string]: unknown;
            }[];
            /**
             * Date From
             * @description Fecha desde
             */
            date_from?: string | null;
            /**
             * Date To
             * @description Fecha hasta
             */
            date_to?: string | null;
            /**
             * Generated By
             * @description ID del usuario que generó la URL
             */
            generated_by: number;
            /**
             * Generated At
             * @description Timestamp de generación
             */
            generated_at: number;
        };
        /**
         * EventoStats
         * @description Estadísticas de eventos más típicos
         */
        app__api__v1__dashboard__get_resumen__EventoStats: {
            /** Tipo Eno */
            tipo_eno: string;
            /** Codigo Tipo */
            codigo_tipo: string | null;
            /** Total */
            total: number;
            /** Clasificaciones */
            clasificaciones: {
                [key: string]: number;
            };
        };
        /**
         * DiagnosticoInfo
         * @description Información de diagnóstico
         */
        app__api__v1__eventos__get_detail__DiagnosticoInfo: {
            /**
             * Id
             * @description ID del diagnóstico
             */
            id: number;
            /**
             * Diagnostico
             * @description Diagnóstico
             */
            diagnostico?: string | null;
            /**
             * Fecha
             * @description Fecha del diagnóstico
             */
            fecha?: string | null;
            /**
             * Es Principal
             * @description Si es diagnóstico principal
             */
            es_principal?: boolean | null;
        };
        /**
         * DomicilioGeograficoInfo
         * @description Información geográfica del domicilio al momento del evento
         */
        app__api__v1__eventos__get_detail__DomicilioGeograficoInfo: {
            /**
             * Latitud
             * @description Latitud del domicilio
             */
            latitud?: string | null;
            /**
             * Longitud
             * @description Longitud del domicilio
             */
            longitud?: string | null;
            /**
             * Calle
             * @description Calle del domicilio
             */
            calle?: string | null;
            /**
             * Numero
             * @description Número del domicilio
             */
            numero?: string | null;
            /**
             * Localidad
             * @description Localidad del domicilio
             */
            localidad?: string | null;
            /**
             * Departamento
             * @description Departamento del domicilio
             */
            departamento?: string | null;
            /**
             * Provincia
             * @description Provincia del domicilio
             */
            provincia?: string | null;
        };
        /**
         * EstudioInfo
         * @description Información de estudio realizado sobre una muestra
         */
        app__api__v1__eventos__get_detail__EstudioInfo: {
            /**
             * Id
             * @description ID del estudio
             */
            id: number;
            /**
             * Determinacion
             * @description Determinación realizada
             */
            determinacion?: string | null;
            /**
             * Tecnica
             * @description Técnica utilizada
             */
            tecnica?: string | null;
            /**
             * Resultado
             * @description Resultado del estudio
             */
            resultado?: string | null;
            /**
             * Fecha Estudio
             * @description Fecha del estudio
             */
            fecha_estudio?: string | null;
            /**
             * Fecha Recepcion
             * @description Fecha de recepción
             */
            fecha_recepcion?: string | null;
        };
        /**
         * InternacionInfo
         * @description Información de internación
         */
        app__api__v1__eventos__get_detail__InternacionInfo: {
            /**
             * Id
             * @description ID de la internación
             */
            id: number;
            /**
             * Fecha Internacion
             * @description Fecha de internación
             */
            fecha_internacion?: string | null;
            /**
             * Fecha Alta
             * @description Fecha de alta
             */
            fecha_alta?: string | null;
            /**
             * Requirio Uci
             * @description Si requirió UCI
             */
            requirio_uci?: boolean | null;
        };
        /**
         * MuestraInfo
         * @description Información de muestra con sus estudios
         */
        app__api__v1__eventos__get_detail__MuestraInfo: {
            /**
             * Id
             * @description ID de la muestra
             */
            id: number;
            /**
             * Tipo
             * @description Tipo de muestra
             */
            tipo?: string | null;
            /**
             * Fecha Toma Muestra
             * @description Fecha de toma
             */
            fecha_toma_muestra?: string | null;
            /**
             * Establecimiento
             * @description Establecimiento donde se tomó
             */
            establecimiento?: string | null;
            /**
             * Semana Epidemiologica
             * @description Semana epidemiológica
             */
            semana_epidemiologica?: number | null;
            /**
             * Anio Epidemiologico
             * @description Año epidemiológico
             */
            anio_epidemiologico?: number | null;
            /**
             * Valor
             * @description Valor del resultado general
             */
            valor?: string | null;
            /**
             * Estudios
             * @description Estudios realizados sobre esta muestra
             */
            estudios?: components["schemas"]["app__api__v1__eventos__get_detail__EstudioInfo"][];
        };
        /**
         * SintomaInfo
         * @description Información de síntoma
         */
        app__api__v1__eventos__get_detail__SintomaInfo: {
            /**
             * Id
             * @description ID del síntoma
             */
            id: number;
            /**
             * Nombre
             * @description Nombre del síntoma
             */
            nombre?: string | null;
            /**
             * Fecha Inicio
             * @description Fecha de inicio del síntoma
             */
            fecha_inicio?: string | null;
            /**
             * Semana Epidemiologica
             * @description Semana epidemiológica de aparición
             */
            semana_epidemiologica?: number | null;
            /**
             * Anio Epidemiologico
             * @description Año epidemiológico
             */
            anio_epidemiologico?: number | null;
        };
        /**
         * TratamientoInfo
         * @description Información de tratamiento
         */
        app__api__v1__eventos__get_detail__TratamientoInfo: {
            /**
             * Id
             * @description ID del tratamiento
             */
            id: number;
            /**
             * Descripcion
             * @description Descripción del tratamiento
             */
            descripcion?: string | null;
            /**
             * Establecimiento
             * @description Establecimiento de tratamiento
             */
            establecimiento?: string | null;
            /**
             * Fecha Inicio
             * @description Fecha de inicio
             */
            fecha_inicio?: string | null;
            /**
             * Fecha Fin
             * @description Fecha de fin
             */
            fecha_fin?: string | null;
            /**
             * Resultado
             * @description Resultado del tratamiento
             */
            resultado?: string | null;
            /**
             * Recibio Tratamiento
             * @description Si recibió tratamiento
             */
            recibio_tratamiento?: boolean | null;
        };
        /**
         * VacunaInfo
         * @description Información de vacuna
         */
        app__api__v1__eventos__get_detail__VacunaInfo: {
            /**
             * Id
             * @description ID de la vacuna
             */
            id: number;
            /**
             * Nombre Vacuna
             * @description Nombre de la vacuna
             */
            nombre_vacuna?: string | null;
            /**
             * Fecha Ultima Dosis
             * @description Fecha de última dosis
             */
            fecha_ultima_dosis?: string | null;
            /**
             * Dosis Total
             * @description Total de dosis
             */
            dosis_total?: number | null;
        };
        /**
         * EventoStats
         * @description Estadísticas agregadas de eventos
         */
        app__api__v1__eventos__list__EventoStats: {
            /**
             * Total
             * @description Total de eventos
             */
            total: number;
            /**
             * Confirmados
             * @description Eventos confirmados
             * @default 0
             */
            confirmados: number;
            /**
             * Sospechosos
             * @description Eventos sospechosos
             * @default 0
             */
            sospechosos: number;
            /**
             * Probables
             * @description Eventos probables
             * @default 0
             */
            probables: number;
            /**
             * Descartados
             * @description Eventos descartados
             * @default 0
             */
            descartados: number;
            /**
             * Negativos
             * @description Eventos negativos
             * @default 0
             */
            negativos: number;
            /**
             * En Estudio
             * @description Eventos en estudio
             * @default 0
             */
            en_estudio: number;
            /**
             * Requiere Revision
             * @description Eventos que requieren revisión
             * @default 0
             */
            requiere_revision: number;
            /**
             * Sin Clasificar
             * @description Eventos sin clasificar
             * @default 0
             */
            sin_clasificar: number;
        };
        /**
         * DiagnosticoInfo
         * @description Información de un diagnóstico
         */
        app__api__v1__personas__get_detail__DiagnosticoInfo: {
            /** Id */
            id: number;
            /** Diagnostico */
            diagnostico: string;
            /** Fecha */
            fecha?: string | null;
        };
        /**
         * DomicilioGeograficoInfo
         * @description Información geográfica del domicilio
         */
        app__api__v1__personas__get_detail__DomicilioGeograficoInfo: {
            /** Latitud */
            latitud?: string | null;
            /** Longitud */
            longitud?: string | null;
            /** Calle */
            calle?: string | null;
            /** Numero */
            numero?: string | null;
            /** Localidad */
            localidad?: string | null;
            /** Departamento */
            departamento?: string | null;
            /** Provincia */
            provincia?: string | null;
        };
        /**
         * EstudioInfo
         * @description Información de un estudio
         */
        app__api__v1__personas__get_detail__EstudioInfo: {
            /** Id */
            id: number;
            /** Determinacion */
            determinacion?: string | null;
            /** Tecnica */
            tecnica?: string | null;
            /** Resultado */
            resultado?: string | null;
            /** Fecha Estudio */
            fecha_estudio?: string | null;
        };
        /**
         * InternacionInfo
         * @description Información de internación
         */
        app__api__v1__personas__get_detail__InternacionInfo: {
            /** Id */
            id: number;
            /** Establecimiento */
            establecimiento?: string | null;
            /** Fecha Internacion */
            fecha_internacion?: string | null;
            /** Fecha Alta */
            fecha_alta?: string | null;
            /**
             * Cuidados Intensivos
             * @default false
             */
            cuidados_intensivos: boolean;
        };
        /**
         * MuestraInfo
         * @description Información de una muestra
         */
        app__api__v1__personas__get_detail__MuestraInfo: {
            /** Id */
            id: number;
            /** Tipo Muestra */
            tipo_muestra?: string | null;
            /** Fecha Toma */
            fecha_toma?: string | null;
            /** Fecha Recepcion */
            fecha_recepcion?: string | null;
            /** Resultado */
            resultado?: string | null;
        };
        /**
         * SintomaInfo
         * @description Información de un síntoma
         */
        app__api__v1__personas__get_detail__SintomaInfo: {
            /** Id */
            id: number;
            /** Nombre */
            nombre: string;
            /** Fecha Inicio */
            fecha_inicio?: string | null;
        };
        /**
         * TratamientoInfo
         * @description Información de tratamiento
         */
        app__api__v1__personas__get_detail__TratamientoInfo: {
            /** Id */
            id: number;
            /** Tratamiento */
            tratamiento?: string | null;
            /** Fecha Inicio */
            fecha_inicio?: string | null;
            /** Fecha Fin */
            fecha_fin?: string | null;
            /** Resultado */
            resultado?: string | null;
        };
        /**
         * VacunaInfo
         * @description Información de vacuna
         */
        app__api__v1__personas__get_detail__VacunaInfo: {
            /** Id */
            id: number;
            /** Vacuna */
            vacuna: string;
            /** Dosis */
            dosis?: number | null;
            /** Fecha Aplicacion */
            fecha_aplicacion?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    login_api_v1_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_access_token_api_v1_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshToken"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_v1_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout_all_sessions_api_v1_auth_logout_all_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_current_user_info_api_v1_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
        };
    };
    update_current_user_api_v1_auth_me_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    change_password_api_v1_auth_change_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserChangePassword"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_sessions_api_v1_auth_sessions_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionInfo"][];
                };
            };
        };
    };
    logout_session_api_v1_auth_sessions__session_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                session_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_api_v1_auth_users_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_api_v1_auth_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_v1_auth_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_api_v1_auth_users__user_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_user_api_v1_auth_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlock_user_api_v1_auth_users__user_id__unlock_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_csv_async_api_v1_uploads_csv_async_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_csv_async_api_v1_uploads_csv_async_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Procesamiento asíncrono iniciado */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_AsyncJobResponse_"];
                };
            };
            /** @description Archivo CSV no válido */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Archivo muy grande (máx 50MB) */
            413: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_job_status_api_v1_uploads_jobs__job_id__status_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_JobStatusResponse_"];
                };
            };
            /** @description Job no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_job_api_v1_uploads_jobs__job_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Job cancelado exitosamente */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Job no encontrado o ya terminado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_dashboard_resumen_api_v1_dashboard_resumen_get: {
        parameters: {
            query?: {
                /** @description Fecha desde */
                fecha_desde?: string | null;
                /** @description Fecha hasta */
                fecha_hasta?: string | null;
                /** @description Filtrar por grupo ENO */
                grupo_id?: number | null;
                /** @description Filtrar por tipo ENO */
                tipo_eno_id?: number | null;
                /** @description Filtrar por clasificación */
                clasificacion?: string | null;
                /** @description Filtrar por provincia INDEC */
                provincia_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_DashboardResumenResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_strategies_api_v1_estrategias__get: {
        parameters: {
            query?: {
                active_only?: boolean | null;
                tipo_eno_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_List_EventStrategyResponse__"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_strategy_api_v1_estrategias__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventStrategyCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventStrategyResponse_"];
                };
            };
            /** @description Datos inválidos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Estrategia ya existe para este tipo de evento */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_strategy_api_v1_estrategias__strategy_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                strategy_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventStrategyResponse_"];
                };
            };
            /** @description Estrategia no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_strategy_api_v1_estrategias__strategy_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                strategy_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventStrategyUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventStrategyResponse_"];
                };
            };
            /** @description Datos inválidos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Estrategia no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_strategy_api_v1_estrategias__strategy_id__delete: {
        parameters: {
            query?: {
                force?: boolean;
            };
            header?: never;
            path: {
                strategy_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Estrategia eliminada exitosamente */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Estrategia no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description No se puede eliminar estrategia activa */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    activate_strategy_api_v1_estrategias__strategy_id__activate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                strategy_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventStrategyResponse_"];
                };
            };
            /** @description Estrategia no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Ya existe estrategia activa para este evento */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    test_strategy_api_v1_estrategias__strategy_id__test_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                strategy_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StrategyTestRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_StrategyTestResponse_"];
                };
            };
            /** @description Datos de prueba inválidos */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Estrategia no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_strategy_audit_log_api_v1_estrategias__strategy_id__audit_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                strategy_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_List_AuditLogResponse__"];
                };
            };
            /** @description Estrategia no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_eventos_api_v1_eventos__get: {
        parameters: {
            query?: {
                /** @description Número de página */
                page?: number;
                /** @description Tamaño de página */
                page_size?: number;
                /** @description Búsqueda por ID, nombre o documento */
                search?: string | null;
                tipo_eno_id?: number | null;
                fecha_desde?: string | null;
                fecha_hasta?: string | null;
                clasificacion?: string | null;
                provincia?: string | null;
                tipo_sujeto?: string | null;
                requiere_revision?: boolean | null;
                sort_by?: components["schemas"]["EventoSortBy"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventoListResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_eventos_mapa_api_v1_eventos_mapa_get: {
        parameters: {
            query?: {
                /** @description Nivel de agregación geográfica */
                nivel?: "provincia" | "departamento" | "localidad";
                /** @description Filtrar por provincia (requerido para nivel departamento) */
                id_provincia_indec?: number | null;
                /** @description Filtrar por departamento (requerido para nivel localidad) */
                id_departamento_indec?: number | null;
                /** @description Filtrar por grupo ENO */
                id_grupo_eno?: number | null;
                /** @description Filtrar por tipo ENO */
                id_tipo_eno?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventoMapaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    export_eventos_api_v1_eventos_export_get: {
        parameters: {
            query?: {
                tipo_eno_id?: number | null;
                fecha_desde?: string | null;
                fecha_hasta?: string | null;
                clasificacion?: string | null;
                /** @description Formato de exportación (csv/excel) */
                formato?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Archivo CSV/Excel con los eventos */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_evento_detail_api_v1_eventos__evento_id__get: {
        parameters: {
            query?: {
                /** @description Incluir datos relacionados */
                include_relations?: boolean;
            };
            header?: never;
            path: {
                evento_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventoDetailResponse_"];
                };
            };
            /** @description Evento no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_evento_timeline_api_v1_eventos__evento_id__timeline_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                evento_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_EventoTimelineResponse_"];
                };
            };
            /** @description Evento no encontrado */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_personas_api_v1_personas__get: {
        parameters: {
            query?: {
                /** @description Número de página */
                page?: number;
                /** @description Tamaño de página */
                page_size?: number;
                /** @description Búsqueda por nombre, apellido o documento */
                search?: string | null;
                /** @description Filtro por tipo: humano, animal, todos */
                tipo_sujeto?: string | null;
                provincia?: string | null;
                /** @description Solo personas con múltiples eventos */
                tiene_multiples_eventos?: boolean | null;
                sort_by?: components["schemas"]["PersonaSortBy"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_PersonaListResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_persona_detail_api_v1_personas__tipo_sujeto___persona_id__get: {
        parameters: {
            query?: {
                /** @description Incluir relaciones completas (síntomas, muestras, etc.) */
                include_relations?: boolean;
            };
            header?: never;
            path: {
                /** @description Tipo de sujeto: humano o animal */
                tipo_sujeto: string;
                /** @description ID de la persona */
                persona_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_PersonaDetailResponse_"];
                };
            };
            /** @description Persona no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_persona_timeline_api_v1_personas__tipo_sujeto___persona_id__timeline_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tipo de sujeto: humano o animal */
                tipo_sujeto: string;
                /** @description ID de la persona */
                persona_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_PersonaTimelineResponse_"];
                };
            };
            /** @description Persona no encontrada */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_tipos_eno_api_v1_tiposEno__get: {
        parameters: {
            query?: {
                /** @description Número de página */
                page?: number;
                /** @description Elementos por página */
                per_page?: number;
                /** @description Filtrar por nombre del tipo */
                nombre?: string | null;
                /** @description Filtrar por ID del grupo */
                grupo_id?: number | null;
                /** @description Filtrar por múltiples IDs de grupo */
                grupos?: number[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_TipoEnoInfo_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_grupos_eno_api_v1_gruposEno__get: {
        parameters: {
            query?: {
                /** @description Número de página */
                page?: number;
                /** @description Elementos por página */
                per_page?: number;
                /** @description Filtrar por nombre */
                nombre?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_GrupoEnoInfo_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Error interno del servidor */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_dashboard_charts_api_v1_charts_dashboard_get: {
        parameters: {
            query?: {
                /** @description ID del grupo seleccionado */
                grupo_id?: number | null;
                /** @description ID del evento seleccionado */
                evento_id?: number | null;
                /** @description Fecha desde (formato: YYYY-MM-DD) */
                fecha_desde?: string | null;
                /** @description Fecha hasta (formato: YYYY-MM-DD) */
                fecha_hasta?: string | null;
                /** @description Filtrar por clasificaciones estratégicas */
                clasificaciones?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_DashboardChartsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_indicadores_api_v1_charts_indicadores_get: {
        parameters: {
            query?: {
                /** @description ID del grupo seleccionado */
                grupo_id?: number | null;
                /** @description ID del evento seleccionado */
                evento_id?: number | null;
                /** @description Fecha desde (formato: YYYY-MM-DD) */
                fecha_desde?: string | null;
                /** @description Fecha hasta (formato: YYYY-MM-DD) */
                fecha_hasta?: string | null;
                /** @description Filtrar por clasificaciones estratégicas */
                clasificaciones?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_IndicadoresResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_charts_disponibles_api_v1_charts_disponibles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_ChartsDisponiblesResponse_"];
                };
            };
        };
    };
    get_mapa_geografico_api_v1_charts_mapa_geografico_get: {
        parameters: {
            query?: {
                /** @description ID del grupo seleccionado */
                grupo_id?: number | null;
                /** @description ID del evento seleccionado */
                evento_id?: number | null;
                /** @description Fecha desde (formato: YYYY-MM-DD) */
                fecha_desde?: string | null;
                /** @description Fecha hasta (formato: YYYY-MM-DD) */
                fecha_hasta?: string | null;
                /** @description Filtrar por clasificaciones estratégicas */
                clasificaciones?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_MapaGeograficoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_report_api_v1_reports_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_zip_report_api_v1_reports_generate_zip_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_report_api_v1_reports_preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_report_signed_url_api_v1_reports_generate_signed_url_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportFiltersRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_SignedUrlResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_signed_url_endpoint_api_v1_reports_verify_signed_url_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifySignedUrlRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_VerifySignedUrlResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    api_root_api_v1__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
}
